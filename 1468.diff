diff --git a/clutter/clutter/clutter-stage-view-private.h b/clutter/clutter/clutter-stage-view-private.h
index d98fb463af4698dacff5bbfe81a323a286414e01..deb56a1de8684a84570b7378100692ae8bc57c38 100644
--- a/clutter/clutter/clutter-stage-view-private.h
+++ b/clutter/clutter/clutter-stage-view-private.h
@@ -65,9 +65,6 @@ void clutter_stage_view_transform_rect_to_onscreen (ClutterStageView
 
 void clutter_stage_view_schedule_update (ClutterStageView *view);
 
-CLUTTER_EXPORT
-float clutter_stage_view_get_refresh_rate (ClutterStageView *view);
-
 void clutter_stage_view_notify_presented (ClutterStageView *view,
                                           ClutterFrameInfo *frame_info);
 
diff --git a/clutter/clutter/clutter-stage-view.h b/clutter/clutter/clutter-stage-view.h
index 3f2ef8af94d3637c684ef5d787d413f36de968c2..c2cf76abf6a994351c9b057f203e57f459953d1d 100644
--- a/clutter/clutter/clutter-stage-view.h
+++ b/clutter/clutter/clutter-stage-view.h
@@ -79,4 +79,7 @@ ClutterFrameClock * clutter_stage_view_get_frame_clock (ClutterStageView *view);
 CLUTTER_EXPORT
 CoglScanout * clutter_stage_view_peek_scanout (ClutterStageView *view);
 
+CLUTTER_EXPORT
+float clutter_stage_view_get_refresh_rate (ClutterStageView *view);
+
 #endif /* __CLUTTER_STAGE_VIEW_H__ */
diff --git a/src/compositor/meta-surface-actor-wayland.c b/src/compositor/meta-surface-actor-wayland.c
index b8071067bdc70f3d36175b57f368226bc0f1285a..08b4f79f76bc79773352e0e2c7e7130a8725b583 100644
--- a/src/compositor/meta-surface-actor-wayland.c
+++ b/src/compositor/meta-surface-actor-wayland.c
@@ -81,6 +81,54 @@ meta_surface_actor_wayland_try_acquire_scanout (MetaSurfaceActorWayland *self,
   return scanout;
 }
 
+#define UNOBSCURED_TRESHOLD 0.1
+
+ClutterStageView *
+meta_surface_actor_wayland_get_current_primary_view (MetaSurfaceActor *actor,
+                                                     ClutterStage     *stage)
+{
+  ClutterStageView *current_primary_view = NULL;
+  float highest_refresh_rate = 0;
+  float biggest_unobscurred_fraction = 0;
+  GList *l;
+
+  for (l = clutter_stage_peek_stage_views (stage); l; l = l->next)
+    {
+      ClutterStageView *stage_view = l->data;
+      float refresh_rate;
+      float unobscurred_fraction = 1.0;
+
+      if (clutter_actor_has_mapped_clones (CLUTTER_ACTOR (actor)))
+        {
+          if (!clutter_actor_is_effectively_on_stage_view (CLUTTER_ACTOR (actor),
+                                                           stage_view))
+            continue;
+        }
+      else
+        {
+          if (meta_surface_actor_is_obscured_on_stage_view (actor,
+                                                            stage_view,
+                                                            &unobscurred_fraction))
+            continue;
+        }
+
+      refresh_rate = clutter_stage_view_get_refresh_rate (stage_view);
+
+      if ((refresh_rate > highest_refresh_rate &&
+           (unobscurred_fraction > UNOBSCURED_TRESHOLD ||
+            biggest_unobscurred_fraction < UNOBSCURED_TRESHOLD)) ||
+          (biggest_unobscurred_fraction < UNOBSCURED_TRESHOLD &&
+           unobscurred_fraction > UNOBSCURED_TRESHOLD))
+        {
+          current_primary_view = stage_view;
+          highest_refresh_rate = refresh_rate;
+          biggest_unobscurred_fraction = unobscurred_fraction;
+        }
+    }
+
+  return current_primary_view;
+}
+
 static void
 meta_surface_actor_wayland_dispose (GObject *object)
 {
diff --git a/src/compositor/meta-surface-actor-wayland.h b/src/compositor/meta-surface-actor-wayland.h
index d61a4df5720037e0b07c1c54e25df19957b76ad9..10eb3326ae892b6b4c5d24d2efc4e9d362581c81 100644
--- a/src/compositor/meta-surface-actor-wayland.h
+++ b/src/compositor/meta-surface-actor-wayland.h
@@ -55,6 +55,9 @@ void meta_surface_actor_wayland_add_frame_callbacks (MetaSurfaceActorWayland *se
 CoglScanout * meta_surface_actor_wayland_try_acquire_scanout (MetaSurfaceActorWayland *self,
                                                               CoglOnscreen            *onscreen);
 
+ClutterStageView * meta_surface_actor_wayland_get_current_primary_view (MetaSurfaceActor *actor,
+                                                                        ClutterStage     *stage);
+
 G_END_DECLS
 
 #endif /* __META_SURFACE_ACTOR_WAYLAND_H__ */
diff --git a/src/compositor/meta-surface-actor.c b/src/compositor/meta-surface-actor.c
index 7d5f2bc5d802ace1b84e13ab6cc034733a5ade17..a21c14b282b96eaac99e574b50b458579182f03f 100644
--- a/src/compositor/meta-surface-actor.c
+++ b/src/compositor/meta-surface-actor.c
@@ -469,6 +469,74 @@ meta_surface_actor_is_obscured (MetaSurfaceActor *self)
     return FALSE;
 }
 
+gboolean
+meta_surface_actor_is_obscured_on_stage_view (MetaSurfaceActor *self,
+                                              ClutterStageView *stage_view,
+                                              float            *unobscurred_fraction)
+{
+  cairo_region_t *unobscured_region;
+
+  unobscured_region = effective_unobscured_region (self);
+
+  if (unobscured_region)
+    {
+      MetaSurfaceActorPrivate *priv =
+        meta_surface_actor_get_instance_private (self);
+      cairo_region_t *intersection_region;
+      cairo_rectangle_int_t stage_rect;
+      float x, y;
+      float bounds_width, bounds_height;
+      float bounds_size;
+      int intersection_size = 0;
+      int n_rects, i;
+
+      if (cairo_region_is_empty (unobscured_region))
+        return TRUE;
+
+      intersection_region = cairo_region_copy (unobscured_region);
+      clutter_actor_get_transformed_position (CLUTTER_ACTOR (self), &x, &y);
+      cairo_region_translate (intersection_region, x, y);
+
+      clutter_stage_view_get_layout (stage_view, &stage_rect);
+      cairo_region_intersect_rectangle (intersection_region,
+                                        &stage_rect);
+
+      if (cairo_region_is_empty (intersection_region))
+        {
+          cairo_region_destroy (intersection_region);
+          return TRUE;
+        }
+      else if (!unobscurred_fraction)
+        {
+          cairo_region_destroy (intersection_region);
+          return FALSE;
+        }
+
+      clutter_content_get_preferred_size (CLUTTER_CONTENT (priv->texture),
+                                          &bounds_width,
+                                          &bounds_height);
+      bounds_size = bounds_width * bounds_height;
+
+      n_rects = cairo_region_num_rectangles (intersection_region);
+      for (i = 0; i < n_rects; i++)
+        {
+          cairo_rectangle_int_t rect;
+
+          cairo_region_get_rectangle (intersection_region, i, &rect);
+          intersection_size += (rect.width - rect.x) * (rect.height - rect.x);
+        }
+      cairo_region_destroy (intersection_region);
+
+      g_return_val_if_fail (bounds_size > 0, FALSE);
+
+      *unobscurred_fraction = CLAMP (intersection_size / bounds_size, 0, 1);
+      return FALSE;
+    }
+
+  return !clutter_actor_is_effectively_on_stage_view (CLUTTER_ACTOR (self),
+                                                      stage_view);
+}
+
 void
 meta_surface_actor_set_input_region (MetaSurfaceActor *self,
                                      cairo_region_t   *region)
diff --git a/src/compositor/meta-surface-actor.h b/src/compositor/meta-surface-actor.h
index fb3764c0f944c5561100d677a2c1a4a3eedef8c1..a6125104990b108518ddf2d2c275a93cd0f4d412 100644
--- a/src/compositor/meta-surface-actor.h
+++ b/src/compositor/meta-surface-actor.h
@@ -39,6 +39,9 @@ void meta_surface_actor_update_area (MetaSurfaceActor *self,
                                      int               height);
 
 gboolean meta_surface_actor_is_obscured (MetaSurfaceActor *self);
+gboolean meta_surface_actor_is_obscured_on_stage_view (MetaSurfaceActor *self,
+                                                       ClutterStageView *stage_view,
+                                                       float            *unobscurred_fraction);
 
 void meta_surface_actor_set_input_region (MetaSurfaceActor *self,
                                           cairo_region_t   *region);
diff --git a/src/wayland/meta-wayland.c b/src/wayland/meta-wayland.c
index fe52a03e3e4510306ebee6bd426bfc41b5ed19f8..e5e9d900bbd3da83678421bb381858059237cbfc 100644
--- a/src/wayland/meta-wayland.c
+++ b/src/wayland/meta-wayland.c
@@ -30,6 +30,7 @@
 
 #include "clutter/clutter.h"
 #include "clutter/wayland/clutter-wayland-compositor.h"
+#include "compositor/meta-surface-actor-wayland.h"
 #include "core/main-private.h"
 #include "wayland/meta-wayland-buffer.h"
 #include "wayland/meta-wayland-data-device.h"
@@ -212,6 +213,7 @@ on_after_update (ClutterStage          *stage,
       MetaWaylandSurface *surface = l->data;
       MetaSurfaceActor *actor;
       MetaWaylandActorSurface *actor_surface;
+      ClutterStageView *surface_primary_view;
 
       l = l->next;
 
@@ -219,12 +221,9 @@ on_after_update (ClutterStage          *stage,
       if (!actor)
         continue;
 
-      if (!clutter_actor_has_mapped_clones (CLUTTER_ACTOR (actor)) &&
-          meta_surface_actor_is_obscured (actor))
-        continue;
-
-      if (!clutter_actor_is_effectively_on_stage_view (CLUTTER_ACTOR (actor),
-                                                       stage_view))
+      surface_primary_view =
+        meta_surface_actor_wayland_get_current_primary_view (actor, stage);
+      if (stage_view != surface_primary_view)
         continue;
 
       actor_surface = META_WAYLAND_ACTOR_SURFACE (surface->role);
