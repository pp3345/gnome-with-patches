From dd2f4963d39a46eeda5825ba25af925424821ac9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Florian=20M=C3=BCllner?= <fmuellner@gnome.org>
Date: Wed, 20 Jan 2021 12:22:22 +0100
Subject: [PATCH 01/26] window: Do not handle ungrabbed events when unmanaging

Once we are no longer managing a window, we have no business in
dealing with it anymore, and operations like focusing, raising or
pinging the window aren't expected to work, and can go horribly
wrong if we try.

https://gitlab.gnome.org/GNOME/gnome-shell/-/issues/2467

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1676>
(cherry picked from commit e7b58c23b896c604b71d542b2f477523df60e637)
---
 src/core/window.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/core/window.c b/src/core/window.c
index 2e37e9d593..1abad19a77 100644
--- a/src/core/window.c
+++ b/src/core/window.c
@@ -8313,6 +8313,9 @@ meta_window_handle_ungrabbed_event (MetaWindow         *window,
   gfloat x, y;
   guint button;
 
+  if (window->unmanaging)
+    return;
+
   if (event->type != CLUTTER_BUTTON_PRESS &&
       event->type != CLUTTER_TOUCH_BEGIN)
     return;
-- 
2.29.2


From 75c3fc560eb7be9396dcf41bf7dd7c7d91b30417 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Florian=20M=C3=BCllner?= <fmuellner@gnome.org>
Date: Wed, 20 Jan 2021 11:55:10 +0100
Subject: [PATCH 02/26] window: Guard can_ping() against unmanaging windows

We remove pending pings when unmanaging a window, but currently
don't prevent new pings to be scheduled after that.

The previous commit fixed a code path where this did indeed happen,
but as the result of gnome-shell trying to attach a Clutter actor
to a non-existent window actor is pretty bad, also guard can_ping()
against being called for an unmanaging window.

https://gitlab.gnome.org/GNOME/gnome-shell/-/issues/2467

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1676>
(cherry picked from commit 81f369480424fb5dd151f44c36104b3d237d789c)
---
 src/core/window.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/core/window.c b/src/core/window.c
index 1abad19a77..c87f8eee0d 100644
--- a/src/core/window.c
+++ b/src/core/window.c
@@ -8573,6 +8573,8 @@ meta_window_is_focusable (MetaWindow *window)
 gboolean
 meta_window_can_ping (MetaWindow *window)
 {
+  g_return_val_if_fail (!window->unmanaging, FALSE);
+
   return META_WINDOW_GET_CLASS (window)->can_ping (window);
 }
 
-- 
2.29.2


From c5617502c50c85cd2c604b2c3a616aa95abb5cc9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Thomas=20M=C3=BChlbacher?= <tmuehlbacher@posteo.net>
Date: Wed, 27 Jan 2021 19:59:26 +0100
Subject: [PATCH 03/26] monitor-config-store: Properly escape monitor spec

Makes sure that monitor specs which may be read from EDID data do not
contain characters that are invalid in XML. Makes it possible to restore
monitor configs of monitor models with characters such as '&' in them.

To make this change not break any tests, the sample monitor configs need
to be adjusted as well. Apostrophes don't strictly have to be escaped in
XML text elements. However, we now do escape the elements in
`<monitorspec>` specifically.

Closes: <https://gitlab.gnome.org/GNOME/mutter/-/issues/1011>
(cherry picked from commit 70cdd720405699c92abda145e356c84e0b9bad96)

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1694>
---
 src/backends/meta-monitor-config-store.c      | 23 +++++++++++++++----
 src/tests/migration/oneoff-new-finished.xml   |  4 ++--
 src/tests/migration/oneoff-new.xml            |  4 ++--
 src/tests/migration/oneoff-old.xml            |  4 ++--
 src/tests/migration/rotated-new-finished.xml  |  2 +-
 src/tests/migration/rotated-new.xml           |  2 +-
 src/tests/migration/rotated-old.xml           |  2 +-
 src/tests/migration/wiggle-new-finished.xml   |  2 +-
 src/tests/migration/wiggle-new.xml            |  2 +-
 src/tests/migration/wiggle-old.xml            |  2 +-
 src/tests/monitor-configs/first-rotated.xml   |  4 ++--
 .../monitor-configs/fractional-scale.xml      |  2 +-
 .../high-precision-fractional-scale.xml       |  2 +-
 src/tests/monitor-configs/interlaced.xml      |  2 +-
 src/tests/monitor-configs/lid-scale.xml       |  2 +-
 src/tests/monitor-configs/lid-switch.xml      |  8 +++----
 src/tests/monitor-configs/mirrored.xml        |  4 ++--
 .../non-preferred-tiled-custom-resolution.xml |  2 +-
 src/tests/monitor-configs/oneoff.xml          |  4 ++--
 src/tests/monitor-configs/primary.xml         |  4 ++--
 src/tests/monitor-configs/scale.xml           |  2 +-
 .../monitor-configs/second-rotated-tiled.xml  |  4 ++--
 src/tests/monitor-configs/second-rotated.xml  |  4 ++--
 src/tests/monitor-configs/single.xml          |  2 +-
 .../tiled-custom-resolution.xml               |  2 +-
 src/tests/monitor-configs/tiled.xml           |  2 +-
 src/tests/monitor-configs/underscanning.xml   |  2 +-
 src/tests/monitor-configs/vertical.xml        |  4 ++--
 28 files changed, 59 insertions(+), 44 deletions(-)

diff --git a/src/backends/meta-monitor-config-store.c b/src/backends/meta-monitor-config-store.c
index 129b632854..9ad432ce1a 100644
--- a/src/backends/meta-monitor-config-store.c
+++ b/src/backends/meta-monitor-config-store.c
@@ -1138,19 +1138,34 @@ append_monitor_spec (GString         *buffer,
                      MetaMonitorSpec *monitor_spec,
                      const char      *indentation)
 {
+  char *escaped;
+
   g_string_append_printf (buffer, "%s<monitorspec>\n", indentation);
+
+  escaped = g_markup_escape_text (monitor_spec->connector, -1);
   g_string_append_printf (buffer, "%s  <connector>%s</connector>\n",
                           indentation,
-                          monitor_spec->connector);
+                          escaped);
+  g_free (escaped);
+
+  escaped = g_markup_escape_text (monitor_spec->vendor, -1);
   g_string_append_printf (buffer, "%s  <vendor>%s</vendor>\n",
                           indentation,
-                          monitor_spec->vendor);
+                          escaped);
+  g_free (escaped);
+
+  escaped = g_markup_escape_text (monitor_spec->product, -1);
   g_string_append_printf (buffer, "%s  <product>%s</product>\n",
                           indentation,
-                          monitor_spec->product);
+                          escaped);
+  g_free (escaped);
+
+  escaped = g_markup_escape_text (monitor_spec->serial, -1);
   g_string_append_printf (buffer, "%s  <serial>%s</serial>\n",
                           indentation,
-                          monitor_spec->serial);
+                          escaped);
+  g_free (escaped);
+
   g_string_append_printf (buffer, "%s</monitorspec>\n", indentation);
 }
 
diff --git a/src/tests/migration/oneoff-new-finished.xml b/src/tests/migration/oneoff-new-finished.xml
index d3ee95c36f..9e71069de5 100644
--- a/src/tests/migration/oneoff-new-finished.xml
+++ b/src/tests/migration/oneoff-new-finished.xml
@@ -8,7 +8,7 @@
       <monitor>
         <monitorspec>
           <connector>DP-1</connector>
-          <vendor>MetaProduct's Inc.</vendor>
+          <vendor>MetaProduct&apos;s Inc.</vendor>
           <product>MetaMonitor</product>
           <serial>0x123456</serial>
         </monitorspec>
@@ -22,7 +22,7 @@
     <disabled>
       <monitorspec>
         <connector>DP-2</connector>
-        <vendor>MetaProduct's Inc.</vendor>
+        <vendor>MetaProduct&apos;s Inc.</vendor>
         <product>MetaMonitor</product>
         <serial>0x654321</serial>
       </monitorspec>
diff --git a/src/tests/migration/oneoff-new.xml b/src/tests/migration/oneoff-new.xml
index 1475c07e2f..02d85f4ded 100644
--- a/src/tests/migration/oneoff-new.xml
+++ b/src/tests/migration/oneoff-new.xml
@@ -8,7 +8,7 @@
       <monitor>
         <monitorspec>
           <connector>DP-1</connector>
-          <vendor>MetaProduct's Inc.</vendor>
+          <vendor>MetaProduct&apos;s Inc.</vendor>
           <product>MetaMonitor</product>
           <serial>0x123456</serial>
         </monitorspec>
@@ -22,7 +22,7 @@
     <disabled>
       <monitorspec>
         <connector>DP-2</connector>
-        <vendor>MetaProduct's Inc.</vendor>
+        <vendor>MetaProduct&apos;s Inc.</vendor>
         <product>MetaMonitor</product>
         <serial>0x654321</serial>
       </monitorspec>
diff --git a/src/tests/migration/oneoff-old.xml b/src/tests/migration/oneoff-old.xml
index 185ecd6669..2293791468 100644
--- a/src/tests/migration/oneoff-old.xml
+++ b/src/tests/migration/oneoff-old.xml
@@ -2,7 +2,7 @@
   <configuration>
     <clone>no</clone>
     <output name="DP-1">
-      <vendor>MetaProduct's Inc.</vendor>
+      <vendor>MetaProduct&apos;s Inc.</vendor>
       <product>MetaMonitor</product>
       <serial>0x123456</serial>
       <width>800</width>
@@ -18,7 +18,7 @@
       <underscanning>no</underscanning>
     </output>
     <output name="DP-2">
-      <vendor>MetaProduct's Inc.</vendor>
+      <vendor>MetaProduct&apos;s Inc.</vendor>
       <product>MetaMonitor</product>
       <serial>0x654321</serial>
     </output>
diff --git a/src/tests/migration/rotated-new-finished.xml b/src/tests/migration/rotated-new-finished.xml
index ad8d614eb2..a67c376dc5 100644
--- a/src/tests/migration/rotated-new-finished.xml
+++ b/src/tests/migration/rotated-new-finished.xml
@@ -12,7 +12,7 @@
       <monitor>
         <monitorspec>
           <connector>DP-1</connector>
-          <vendor>MetaProduct's Inc.</vendor>
+          <vendor>MetaProduct&apos;s Inc.</vendor>
           <product>MetaMonitor</product>
           <serial>0x123456</serial>
         </monitorspec>
diff --git a/src/tests/migration/rotated-new.xml b/src/tests/migration/rotated-new.xml
index f8de70beb1..f419645462 100644
--- a/src/tests/migration/rotated-new.xml
+++ b/src/tests/migration/rotated-new.xml
@@ -12,7 +12,7 @@
       <monitor>
         <monitorspec>
           <connector>DP-1</connector>
-          <vendor>MetaProduct's Inc.</vendor>
+          <vendor>MetaProduct&apos;s Inc.</vendor>
           <product>MetaMonitor</product>
           <serial>0x123456</serial>
         </monitorspec>
diff --git a/src/tests/migration/rotated-old.xml b/src/tests/migration/rotated-old.xml
index cf48ef7b9d..d252f01176 100644
--- a/src/tests/migration/rotated-old.xml
+++ b/src/tests/migration/rotated-old.xml
@@ -2,7 +2,7 @@
   <configuration>
     <clone>no</clone>
     <output name="DP-1">
-      <vendor>MetaProduct's Inc.</vendor>
+      <vendor>MetaProduct&apos;s Inc.</vendor>
       <product>MetaMonitor</product>
       <serial>0x123456</serial>
       <width>600</width>
diff --git a/src/tests/migration/wiggle-new-finished.xml b/src/tests/migration/wiggle-new-finished.xml
index 4d7e9dca11..c4a56556f9 100644
--- a/src/tests/migration/wiggle-new-finished.xml
+++ b/src/tests/migration/wiggle-new-finished.xml
@@ -12,7 +12,7 @@
       <monitor>
         <monitorspec>
           <connector>DP-1</connector>
-          <vendor>MetaProduct's Inc.</vendor>
+          <vendor>MetaProduct&apos;s Inc.</vendor>
           <product>MetaMonitor</product>
           <serial>0x123456</serial>
         </monitorspec>
diff --git a/src/tests/migration/wiggle-new.xml b/src/tests/migration/wiggle-new.xml
index 9afc904964..cd1acf7176 100644
--- a/src/tests/migration/wiggle-new.xml
+++ b/src/tests/migration/wiggle-new.xml
@@ -12,7 +12,7 @@
       <monitor>
         <monitorspec>
           <connector>DP-1</connector>
-          <vendor>MetaProduct's Inc.</vendor>
+          <vendor>MetaProduct&apos;s Inc.</vendor>
           <product>MetaMonitor</product>
           <serial>0x123456</serial>
         </monitorspec>
diff --git a/src/tests/migration/wiggle-old.xml b/src/tests/migration/wiggle-old.xml
index be57011de2..b0c996c035 100644
--- a/src/tests/migration/wiggle-old.xml
+++ b/src/tests/migration/wiggle-old.xml
@@ -2,7 +2,7 @@
   <configuration>
     <clone>no</clone>
     <output name="DP-1">
-      <vendor>MetaProduct's Inc.</vendor>
+      <vendor>MetaProduct&apos;s Inc.</vendor>
       <product>MetaMonitor</product>
       <serial>0x123456</serial>
       <width>600</width>
diff --git a/src/tests/monitor-configs/first-rotated.xml b/src/tests/monitor-configs/first-rotated.xml
index f247975546..59a42bef5b 100644
--- a/src/tests/monitor-configs/first-rotated.xml
+++ b/src/tests/monitor-configs/first-rotated.xml
@@ -11,7 +11,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
@@ -32,7 +32,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-2</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
diff --git a/src/tests/monitor-configs/fractional-scale.xml b/src/tests/monitor-configs/fractional-scale.xml
index eeb49b6bcd..991a47d14a 100644
--- a/src/tests/monitor-configs/fractional-scale.xml
+++ b/src/tests/monitor-configs/fractional-scale.xml
@@ -8,7 +8,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
diff --git a/src/tests/monitor-configs/high-precision-fractional-scale.xml b/src/tests/monitor-configs/high-precision-fractional-scale.xml
index 8fe66477da..2a0d439128 100644
--- a/src/tests/monitor-configs/high-precision-fractional-scale.xml
+++ b/src/tests/monitor-configs/high-precision-fractional-scale.xml
@@ -8,7 +8,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
diff --git a/src/tests/monitor-configs/interlaced.xml b/src/tests/monitor-configs/interlaced.xml
index e7e22feb46..b02f1cf946 100644
--- a/src/tests/monitor-configs/interlaced.xml
+++ b/src/tests/monitor-configs/interlaced.xml
@@ -7,7 +7,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
diff --git a/src/tests/monitor-configs/lid-scale.xml b/src/tests/monitor-configs/lid-scale.xml
index 9b40f0f9ac..d5bfecb110 100644
--- a/src/tests/monitor-configs/lid-scale.xml
+++ b/src/tests/monitor-configs/lid-scale.xml
@@ -8,7 +8,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>eDP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
diff --git a/src/tests/monitor-configs/lid-switch.xml b/src/tests/monitor-configs/lid-switch.xml
index fe51446602..1d43c98bdd 100644
--- a/src/tests/monitor-configs/lid-switch.xml
+++ b/src/tests/monitor-configs/lid-switch.xml
@@ -7,7 +7,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>eDP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
@@ -28,7 +28,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
@@ -52,7 +52,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
@@ -76,7 +76,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>eDP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
diff --git a/src/tests/monitor-configs/mirrored.xml b/src/tests/monitor-configs/mirrored.xml
index 0db260f8c5..7866b4aae6 100644
--- a/src/tests/monitor-configs/mirrored.xml
+++ b/src/tests/monitor-configs/mirrored.xml
@@ -7,7 +7,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
@@ -20,7 +20,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-2</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
diff --git a/src/tests/monitor-configs/non-preferred-tiled-custom-resolution.xml b/src/tests/monitor-configs/non-preferred-tiled-custom-resolution.xml
index 8ee2abf09e..5f46583eba 100644
--- a/src/tests/monitor-configs/non-preferred-tiled-custom-resolution.xml
+++ b/src/tests/monitor-configs/non-preferred-tiled-custom-resolution.xml
@@ -7,7 +7,7 @@
       <monitor>
        <monitorspec>
          <connector>DP-2</connector>
-         <vendor>MetaProduct's Inc.</vendor>
+         <vendor>MetaProduct&apos;s Inc.</vendor>
          <product>MetaMonitor</product>
          <serial>0x123456</serial>
        </monitorspec>
diff --git a/src/tests/monitor-configs/oneoff.xml b/src/tests/monitor-configs/oneoff.xml
index 4e5c6b7a59..63e641cf01 100644
--- a/src/tests/monitor-configs/oneoff.xml
+++ b/src/tests/monitor-configs/oneoff.xml
@@ -8,7 +8,7 @@
       <monitor>
         <monitorspec>
           <connector>DP-1</connector>
-          <vendor>MetaProduct's Inc.</vendor>
+          <vendor>MetaProduct&apos;s Inc.</vendor>
           <product>MetaMonitor</product>
           <serial>0x123456</serial>
         </monitorspec>
@@ -22,7 +22,7 @@
     <disabled>
       <monitorspec>
 	<connector>DP-2</connector>
-	<vendor>MetaProduct's Inc.</vendor>
+	<vendor>MetaProduct&apos;s Inc.</vendor>
 	<product>MetaMonitor</product>
 	<serial>0x654321</serial>
       </monitorspec>
diff --git a/src/tests/monitor-configs/primary.xml b/src/tests/monitor-configs/primary.xml
index 7238b4fd8a..ce78b1099d 100644
--- a/src/tests/monitor-configs/primary.xml
+++ b/src/tests/monitor-configs/primary.xml
@@ -7,7 +7,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
@@ -25,7 +25,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-2</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
diff --git a/src/tests/monitor-configs/scale.xml b/src/tests/monitor-configs/scale.xml
index d6c66b70bb..c011900efb 100644
--- a/src/tests/monitor-configs/scale.xml
+++ b/src/tests/monitor-configs/scale.xml
@@ -8,7 +8,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
diff --git a/src/tests/monitor-configs/second-rotated-tiled.xml b/src/tests/monitor-configs/second-rotated-tiled.xml
index a8593d5038..14ba91b4e6 100644
--- a/src/tests/monitor-configs/second-rotated-tiled.xml
+++ b/src/tests/monitor-configs/second-rotated-tiled.xml
@@ -7,7 +7,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
@@ -28,7 +28,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-2</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
diff --git a/src/tests/monitor-configs/second-rotated.xml b/src/tests/monitor-configs/second-rotated.xml
index ee70c5e9b1..885b2bf830 100644
--- a/src/tests/monitor-configs/second-rotated.xml
+++ b/src/tests/monitor-configs/second-rotated.xml
@@ -7,7 +7,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
@@ -28,7 +28,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-2</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
diff --git a/src/tests/monitor-configs/single.xml b/src/tests/monitor-configs/single.xml
index 771957a4ac..cc01b4a63e 100644
--- a/src/tests/monitor-configs/single.xml
+++ b/src/tests/monitor-configs/single.xml
@@ -7,7 +7,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
diff --git a/src/tests/monitor-configs/tiled-custom-resolution.xml b/src/tests/monitor-configs/tiled-custom-resolution.xml
index b51c3b6f6e..85939dd1f7 100644
--- a/src/tests/monitor-configs/tiled-custom-resolution.xml
+++ b/src/tests/monitor-configs/tiled-custom-resolution.xml
@@ -8,7 +8,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
diff --git a/src/tests/monitor-configs/tiled.xml b/src/tests/monitor-configs/tiled.xml
index 806a5853bd..0ed149ffc5 100644
--- a/src/tests/monitor-configs/tiled.xml
+++ b/src/tests/monitor-configs/tiled.xml
@@ -8,7 +8,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
diff --git a/src/tests/monitor-configs/underscanning.xml b/src/tests/monitor-configs/underscanning.xml
index 7bcd6e75a2..3ab02476d6 100644
--- a/src/tests/monitor-configs/underscanning.xml
+++ b/src/tests/monitor-configs/underscanning.xml
@@ -7,7 +7,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
diff --git a/src/tests/monitor-configs/vertical.xml b/src/tests/monitor-configs/vertical.xml
index 76f11297bf..0546b055cc 100644
--- a/src/tests/monitor-configs/vertical.xml
+++ b/src/tests/monitor-configs/vertical.xml
@@ -7,7 +7,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-1</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
@@ -24,7 +24,7 @@
       <monitor>
 	<monitorspec>
 	  <connector>DP-2</connector>
-	  <vendor>MetaProduct's Inc.</vendor>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
 	  <product>MetaMonitor</product>
 	  <serial>0x123456</serial>
 	</monitorspec>
-- 
2.29.2


From 8af95b4c4b07524e43004eaf00dbf18ec63fa594 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Thomas=20M=C3=BChlbacher?= <tmuehlbacher@posteo.net>
Date: Wed, 27 Jan 2021 20:00:04 +0100
Subject: [PATCH 04/26] monitor-config: Free `meta_monitor_spec` safely

`g_free()` alone can't help if the value it gets is `NULL` + the offset
of the struct members.

This prevents gnome-shell from segfaulting if `monitors.xml` contains
invalid XML.

Closes: <https://gitlab.gnome.org/GNOME/mutter/-/issues/1011>
(cherry picked from commit 88647ae23cd818c28ff81fd9de38aac4144c4994)

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1694>
---
 src/backends/meta-monitor-config-manager.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/backends/meta-monitor-config-manager.c b/src/backends/meta-monitor-config-manager.c
index 1ef92c2d4d..fc7a8dd544 100644
--- a/src/backends/meta-monitor-config-manager.c
+++ b/src/backends/meta-monitor-config-manager.c
@@ -1388,7 +1388,8 @@ meta_monitor_config_manager_class_init (MetaMonitorConfigManagerClass *klass)
 void
 meta_monitor_config_free (MetaMonitorConfig *monitor_config)
 {
-  meta_monitor_spec_free (monitor_config->monitor_spec);
+  if (monitor_config->monitor_spec)
+    meta_monitor_spec_free (monitor_config->monitor_spec);
   g_free (monitor_config->mode_spec);
   g_free (monitor_config);
 }
-- 
2.29.2


From 015acbbc30b7d00e5c36a1d21ea9dc40c1e47e0a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Thomas=20M=C3=BChlbacher?= <tmuehlbacher@posteo.net>
Date: Thu, 28 Jan 2021 16:03:10 +0100
Subject: [PATCH 05/26] tests/monitor-config: Improve debugging output

Make it easier to find out what went wrong with `migrated_data` by
having it included in the debug logs.

Closes: <https://gitlab.gnome.org/GNOME/mutter/-/issues/1011>
(cherry picked from commit 180e62519b4697ef263a28aa6a3db746627c0a4d)

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1694>
---
 src/tests/monitor-config-migration-unit-tests.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/tests/monitor-config-migration-unit-tests.c b/src/tests/monitor-config-migration-unit-tests.c
index 461035d630..bb2ac62ccd 100644
--- a/src/tests/monitor-config-migration-unit-tests.c
+++ b/src/tests/monitor-config-migration-unit-tests.c
@@ -75,7 +75,7 @@ test_migration (const char *old_config,
   g_assert_nonnull (expected_data);
   g_assert_nonnull (migrated_data);
 
-  g_assert (strcmp (expected_data, migrated_data) == 0);
+  g_assert_cmpstr (expected_data, ==, migrated_data);
 
   migrated_file = g_file_new_for_path (migrated_path);
   if (!g_file_delete (migrated_file, NULL, &error))
-- 
2.29.2


From 93a210fd29f233d26e28a7dc7baf6f88d319748f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Thu, 28 Jan 2021 18:59:22 +0100
Subject: [PATCH 06/26] workspace: Downgrade assert to warning when adding
 window

An extension can by accident cause us to end up in a state where we try
to add the same window to a workspace twice. When this happens we
shouldn't crash, but instead complain loudly.

Closes: https://gitlab.gnome.org/GNOME/mutter/-/issues/992
Related: https://gitlab.gnome.org/GNOME/gnome-shell-extensions/-/merge_requests/157
(cherry picked from commit b55b26661f748791fd7207bf5c43b332e8da094c)

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1694>
---
 src/core/workspace.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/core/workspace.c b/src/core/workspace.c
index a94f92ced7..a80560b7b4 100644
--- a/src/core/workspace.c
+++ b/src/core/workspace.c
@@ -369,10 +369,11 @@ void
 meta_workspace_add_window (MetaWorkspace *workspace,
                            MetaWindow    *window)
 {
+  g_return_if_fail (g_list_find (workspace->mru_list, window) == NULL);
+
   COGL_TRACE_BEGIN_SCOPED (MetaWorkspaceAddWindow,
                            "Workspace (add window)");
 
-  g_assert (g_list_find (workspace->mru_list, window) == NULL);
   workspace->mru_list = g_list_prepend (workspace->mru_list, window);
 
   workspace->windows = g_list_prepend (workspace->windows, window);
-- 
2.29.2


From 6724bbe497a259987e3bc1e9f05546c72c5e25f0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Wed, 27 Jan 2021 23:36:51 +0100
Subject: [PATCH 07/26] screen-cast-stream: Add getter for stream src

(cherry picked from commit 9f6a4416651263181d22aea28caa7f2181982705)

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1694>
---
 src/backends/meta-screen-cast-stream.c | 9 +++++++++
 src/backends/meta-screen-cast-stream.h | 2 ++
 2 files changed, 11 insertions(+)

diff --git a/src/backends/meta-screen-cast-stream.c b/src/backends/meta-screen-cast-stream.c
index fa2f3684bc..fed1560fe4 100644
--- a/src/backends/meta-screen-cast-stream.c
+++ b/src/backends/meta-screen-cast-stream.c
@@ -168,6 +168,15 @@ meta_screen_cast_stream_get_object_path (MetaScreenCastStream *stream)
   return priv->object_path;
 }
 
+MetaScreenCastStreamSrc *
+meta_screen_cast_stream_get_src (MetaScreenCastStream *stream)
+{
+  MetaScreenCastStreamPrivate *priv =
+    meta_screen_cast_stream_get_instance_private (stream);
+
+  return priv->src;
+}
+
 void
 meta_screen_cast_stream_transform_position (MetaScreenCastStream *stream,
                                             double                stream_x,
diff --git a/src/backends/meta-screen-cast-stream.h b/src/backends/meta-screen-cast-stream.h
index 1fa8ddd7ac..d121c15c1e 100644
--- a/src/backends/meta-screen-cast-stream.h
+++ b/src/backends/meta-screen-cast-stream.h
@@ -59,6 +59,8 @@ void meta_screen_cast_stream_close (MetaScreenCastStream *stream);
 
 char * meta_screen_cast_stream_get_object_path (MetaScreenCastStream *stream);
 
+MetaScreenCastStreamSrc * meta_screen_cast_stream_get_src (MetaScreenCastStream *stream);
+
 void meta_screen_cast_stream_transform_position (MetaScreenCastStream *stream,
                                                  double                stream_x,
                                                  double                stream_y,
-- 
2.29.2


From d3b386c5f33539bbeef9d2facc96369e88e337dc Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Wed, 27 Jan 2021 23:25:51 +0100
Subject: [PATCH 08/26] screen-cast/monitor-stream: Don't fall apart when
 monitor changes

If the monitor configuration changed, even though the streamed monitor
didn't change, we'd still fail to continue streaming, as we failed to
update the stage watchers, meaning we wouldn't be notified about when
the stage views were painted.

Fix this by reattaching the stage watches, i.e. update the painted
signalling listeners to listen to the right views, when monitor changes
happens.

(cherry picked from commit e877b06fdde60a9fc391628c83258e4ee3b42297)

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1694>
---
 .../meta-screen-cast-monitor-stream-src.c     | 63 +++++++++++++++----
 1 file changed, 50 insertions(+), 13 deletions(-)

diff --git a/src/backends/meta-screen-cast-monitor-stream-src.c b/src/backends/meta-screen-cast-monitor-stream-src.c
index ab3be96836..5d395b6de9 100644
--- a/src/backends/meta-screen-cast-monitor-stream-src.c
+++ b/src/backends/meta-screen-cast-monitor-stream-src.c
@@ -336,18 +336,59 @@ add_view_watches (MetaScreenCastMonitorStreamSrc *monitor_src,
     }
 }
 
+static void
+reattach_watches (MetaScreenCastMonitorStreamSrc *monitor_src)
+{
+  MetaScreenCastStreamSrc *src = META_SCREEN_CAST_STREAM_SRC (monitor_src);
+  MetaScreenCastStream *stream;
+  ClutterStage *stage;
+  GList *l;
+
+  stream = meta_screen_cast_stream_src_get_stream (src);
+  stage = get_stage (monitor_src);
+
+  for (l = monitor_src->watches; l; l = l->next)
+    meta_stage_remove_watch (META_STAGE (stage), l->data);
+  g_clear_pointer (&monitor_src->watches, g_list_free);
+
+  switch (meta_screen_cast_stream_get_cursor_mode (stream))
+    {
+    case META_SCREEN_CAST_CURSOR_MODE_METADATA:
+    case META_SCREEN_CAST_CURSOR_MODE_HIDDEN:
+      add_view_watches (monitor_src,
+                        META_STAGE_WATCH_BEFORE_PAINT,
+                        before_stage_painted);
+      add_view_watches (monitor_src,
+                        META_STAGE_WATCH_AFTER_ACTOR_PAINT,
+                        stage_painted);
+      break;
+    case META_SCREEN_CAST_CURSOR_MODE_EMBEDDED:
+      add_view_watches (monitor_src,
+                        META_STAGE_WATCH_AFTER_PAINT,
+                        stage_painted);
+      break;
+    }
+}
+
+static void
+on_monitors_changed (MetaMonitorManager             *monitor_manager,
+                     MetaScreenCastMonitorStreamSrc *monitor_src)
+{
+  reattach_watches (monitor_src);
+}
+
 static void
 meta_screen_cast_monitor_stream_src_enable (MetaScreenCastStreamSrc *src)
 {
   MetaScreenCastMonitorStreamSrc *monitor_src =
     META_SCREEN_CAST_MONITOR_STREAM_SRC (src);
   MetaBackend *backend = get_backend (monitor_src);
+  MetaMonitorManager *monitor_manager =
+    meta_backend_get_monitor_manager (backend);
   MetaCursorTracker *cursor_tracker = meta_backend_get_cursor_tracker (backend);
-  ClutterStage *stage;
   MetaScreenCastStream *stream;
 
   stream = meta_screen_cast_stream_src_get_stream (src);
-  stage = get_stage (monitor_src);
 
   switch (meta_screen_cast_stream_get_cursor_mode (stream))
     {
@@ -361,25 +402,21 @@ meta_screen_cast_monitor_stream_src_enable (MetaScreenCastStreamSrc *src)
                                 G_CALLBACK (cursor_changed),
                                 monitor_src);
       meta_cursor_tracker_track_position (cursor_tracker);
-      G_GNUC_FALLTHROUGH;
+      break;
     case META_SCREEN_CAST_CURSOR_MODE_HIDDEN:
-      add_view_watches (monitor_src,
-                        META_STAGE_WATCH_BEFORE_PAINT,
-                        before_stage_painted);
-      add_view_watches (monitor_src,
-                        META_STAGE_WATCH_AFTER_ACTOR_PAINT,
-                        stage_painted);
       break;
     case META_SCREEN_CAST_CURSOR_MODE_EMBEDDED:
       inhibit_hw_cursor (monitor_src);
       meta_cursor_tracker_track_position (cursor_tracker);
-      add_view_watches (monitor_src,
-                        META_STAGE_WATCH_AFTER_PAINT,
-                        stage_painted);
       break;
     }
 
-  clutter_actor_queue_redraw (CLUTTER_ACTOR (stage));
+  reattach_watches (monitor_src);
+  g_signal_connect_object (monitor_manager, "monitors-changed-internal",
+                           G_CALLBACK (on_monitors_changed),
+                           monitor_src, 0);
+
+  clutter_actor_queue_redraw (CLUTTER_ACTOR (get_stage (monitor_src)));
 }
 
 static void
-- 
2.29.2


From d881fcdece6087b32cee725c1879a3278ceee9b6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Thu, 28 Jan 2021 23:21:12 +0100
Subject: [PATCH 09/26] screen-cast/area-src: Handle monitors changes here too

Like with the monitor source, we need to reattach to the new views after
monitor changes, otherwise the screen cast will get stuck.

(cherry picked from commit 893c0cd2f93a0d10a211af32d26be167e9656cd7)

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1694>
---
 .../meta-screen-cast-area-stream-src.c        | 21 +++++++++++++++++++
 1 file changed, 21 insertions(+)

diff --git a/src/backends/meta-screen-cast-area-stream-src.c b/src/backends/meta-screen-cast-area-stream-src.c
index e7d42d432a..7cc70dc07f 100644
--- a/src/backends/meta-screen-cast-area-stream-src.c
+++ b/src/backends/meta-screen-cast-area-stream-src.c
@@ -316,12 +316,29 @@ add_view_painted_watches (MetaScreenCastAreaStreamSrc *area_src,
     }
 }
 
+static void
+on_monitors_changed (MetaMonitorManager          *monitor_manager,
+                     MetaScreenCastAreaStreamSrc *area_src)
+{
+  MetaStage *stage = META_STAGE (get_stage (area_src));
+  GList *l;
+
+  for (l = area_src->watches; l; l = l->next)
+    meta_stage_remove_watch (stage, l->data);
+  g_clear_pointer (&area_src->watches, g_list_free);
+
+  add_view_painted_watches (area_src,
+                            META_STAGE_WATCH_AFTER_ACTOR_PAINT);
+}
+
 static void
 meta_screen_cast_area_stream_src_enable (MetaScreenCastStreamSrc *src)
 {
   MetaScreenCastAreaStreamSrc *area_src =
     META_SCREEN_CAST_AREA_STREAM_SRC (src);
   MetaBackend *backend = get_backend (area_src);
+  MetaMonitorManager *monitor_manager =
+    meta_backend_get_monitor_manager (backend);
   MetaCursorTracker *cursor_tracker = meta_backend_get_cursor_tracker (backend);
   ClutterStage *stage;
   MetaScreenCastStream *stream;
@@ -354,6 +371,10 @@ meta_screen_cast_area_stream_src_enable (MetaScreenCastStreamSrc *src)
       break;
     }
 
+  g_signal_connect_object (monitor_manager, "monitors-changed-internal",
+                           G_CALLBACK (on_monitors_changed),
+                           area_src, 0);
+
   clutter_actor_queue_redraw (CLUTTER_ACTOR (stage));
 }
 
-- 
2.29.2


From f68f06073295352d53a78499928975825b9c1c11 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Mon, 30 Nov 2020 10:03:16 +0000
Subject: [PATCH 10/26] window: Freeze stack when calculating showing state

Constantly manipulating the stack caused severe stalls (several seconds)
with many open windows when switching workspaces. The cause for this was
that each show/hide call dealt with the stack in isolation, meaning if
you hid N windows, we'd manipulate and synchronize the stack N times,
potentially doing synchronous calls to the X server while doing so.

Avoid the most severe stalls by freezing the stack while calculating
showing; this made the worst case go from several seconds to around
10-20 ms, which is still bad, but by far not as bad.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1616>


(cherry picked from commit d43c8cd8425fe1ab83c1c959a07f99c21f4844c4)
---
 src/core/window.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/src/core/window.c b/src/core/window.c
index c87f8eee0d..3180d15bf2 100644
--- a/src/core/window.c
+++ b/src/core/window.c
@@ -1798,6 +1798,7 @@ stackcmp (gconstpointer a, gconstpointer b)
 static gboolean
 idle_calc_showing (gpointer data)
 {
+  MetaDisplay *display = meta_get_display ();
   GSList *tmp;
   GSList *copy;
   GSList *should_show;
@@ -1868,6 +1869,8 @@ idle_calc_showing (gpointer data)
       tmp = tmp->next;
     }
 
+  meta_stack_freeze (display->stack);
+
   tmp = should_show;
   while (tmp != NULL)
     {
@@ -1892,6 +1895,8 @@ idle_calc_showing (gpointer data)
       tmp = tmp->next;
     }
 
+  meta_stack_thaw (display->stack);
+
   tmp = copy;
   while (tmp != NULL)
     {
-- 
2.29.2


From 2d47adc109376ebc81a8dd6d920ff970c4f17cb4 Mon Sep 17 00:00:00 2001
From: Olivier Fourdan <ofourdan@redhat.com>
Date: Fri, 22 Jan 2021 16:26:17 +0100
Subject: [PATCH 11/26] window-actor: Add a new can_freeze_commits() API

Mutter freezes Xwayland commits when resizing windows, and thaw them in
the window actors' after_paint() for X11.

Yet, after_paint() could be never called, as when a new window is mapped
while the overview is active in gnome-shell.

As a result, the content of the X11 window will remain invisible to the
overview.

Add a new window actor API to tell whether commits can be frozen. For
Wayland window actors, this always return FALSE, whereas for X11 window
actors, it checks whether the Clutter actor is mapped.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1678>

(cherry picked from commit df5a5d279d1ec9757881304f6cb3ca546a3743a0)
---
 src/compositor/meta-window-actor-private.h | 3 +++
 src/compositor/meta-window-actor-wayland.c | 7 +++++++
 src/compositor/meta-window-actor-x11.c     | 9 +++++++++
 src/compositor/meta-window-actor.c         | 8 ++++++++
 4 files changed, 27 insertions(+)

diff --git a/src/compositor/meta-window-actor-private.h b/src/compositor/meta-window-actor-private.h
index 57dbd0ad07..64741e4167 100644
--- a/src/compositor/meta-window-actor-private.h
+++ b/src/compositor/meta-window-actor-private.h
@@ -32,6 +32,7 @@ struct _MetaWindowActorClass
   void (*set_frozen) (MetaWindowActor *actor,
                       gboolean         frozen);
   void (*update_regions) (MetaWindowActor *actor);
+  gboolean (*can_freeze_commits) (MetaWindowActor *actor);
 };
 
 typedef enum
@@ -96,4 +97,6 @@ gboolean meta_window_actor_is_opaque (MetaWindowActor *self);
 
 void meta_window_actor_update_regions (MetaWindowActor *self);
 
+gboolean meta_window_actor_can_freeze_commits (MetaWindowActor *self);
+
 #endif /* META_WINDOW_ACTOR_PRIVATE_H */
diff --git a/src/compositor/meta-window-actor-wayland.c b/src/compositor/meta-window-actor-wayland.c
index cab6bbc847..7c3be56904 100644
--- a/src/compositor/meta-window-actor-wayland.c
+++ b/src/compositor/meta-window-actor-wayland.c
@@ -146,6 +146,12 @@ meta_window_actor_wayland_update_regions (MetaWindowActor *actor)
 {
 }
 
+static gboolean
+meta_window_actor_wayland_can_freeze_commits (MetaWindowActor *actor)
+{
+  return FALSE;
+}
+
 static void
 meta_window_actor_wayland_class_init (MetaWindowActorWaylandClass *klass)
 {
@@ -159,6 +165,7 @@ meta_window_actor_wayland_class_init (MetaWindowActorWaylandClass *klass)
   window_actor_class->queue_destroy = meta_window_actor_wayland_queue_destroy;
   window_actor_class->set_frozen = meta_window_actor_wayland_set_frozen;
   window_actor_class->update_regions = meta_window_actor_wayland_update_regions;
+  window_actor_class->can_freeze_commits = meta_window_actor_wayland_can_freeze_commits;
 }
 
 static void
diff --git a/src/compositor/meta-window-actor-x11.c b/src/compositor/meta-window-actor-x11.c
index 566aac4ec9..676487716a 100644
--- a/src/compositor/meta-window-actor-x11.c
+++ b/src/compositor/meta-window-actor-x11.c
@@ -1458,6 +1458,14 @@ meta_window_actor_x11_update_regions (MetaWindowActor *actor)
   update_regions (META_WINDOW_ACTOR_X11 (actor));
 }
 
+static gboolean
+meta_window_actor_x11_can_freeze_commits (MetaWindowActor *actor)
+{
+  ClutterActor *clutter_actor = CLUTTER_ACTOR (actor);
+
+  return clutter_actor_is_mapped (clutter_actor);
+}
+
 static void
 meta_window_actor_x11_set_property (GObject      *object,
                                     guint         prop_id,
@@ -1632,6 +1640,7 @@ meta_window_actor_x11_class_init (MetaWindowActorX11Class *klass)
   window_actor_class->queue_destroy = meta_window_actor_x11_queue_destroy;
   window_actor_class->set_frozen = meta_window_actor_x11_set_frozen;
   window_actor_class->update_regions = meta_window_actor_x11_update_regions;
+  window_actor_class->can_freeze_commits = meta_window_actor_x11_can_freeze_commits;
 
   actor_class->paint = meta_window_actor_x11_paint;
   actor_class->get_paint_volume = meta_window_actor_x11_get_paint_volume;
diff --git a/src/compositor/meta-window-actor.c b/src/compositor/meta-window-actor.c
index 8d2548fbb7..ae450a1bec 100644
--- a/src/compositor/meta-window-actor.c
+++ b/src/compositor/meta-window-actor.c
@@ -257,6 +257,14 @@ meta_window_actor_update_regions (MetaWindowActor *self)
   META_WINDOW_ACTOR_GET_CLASS (self)->update_regions (self);
 }
 
+gboolean
+meta_window_actor_can_freeze_commits (MetaWindowActor *self)
+{
+  g_return_val_if_fail (META_IS_WINDOW_ACTOR (self), FALSE);
+
+  return META_WINDOW_ACTOR_GET_CLASS (self)->can_freeze_commits (self);
+}
+
 static void
 meta_window_actor_set_frozen (MetaWindowActor *self,
                               gboolean         frozen)
-- 
2.29.2


From 2d424a73936d48a129732fa8c888b214f241b5ac Mon Sep 17 00:00:00 2001
From: Olivier Fourdan <ofourdan@redhat.com>
Date: Fri, 22 Jan 2021 16:30:57 +0100
Subject: [PATCH 12/26] window/x11: Check before freezing commits

Now that we have a window actor API that can hint whether or not the
window actor would support freezing commits, use it to avoid freezing
Xwayland commit on actors that will not be thawed after paint.

Closes: https://gitlab.gnome.org/GNOME/mutter/-/issues/1615
Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1678>

(cherry picked from commit a2e2cfe43714df656e451ef525b97c24fa786fed)
---
 src/x11/window-x11.c | 16 +++++++++++++++-
 1 file changed, 15 insertions(+), 1 deletion(-)

diff --git a/src/x11/window-x11.c b/src/x11/window-x11.c
index ea9e82c8f8..980a1510a1 100644
--- a/src/x11/window-x11.c
+++ b/src/x11/window-x11.c
@@ -35,6 +35,7 @@
 
 #include "backends/meta-logical-monitor.h"
 #include "backends/x11/meta-backend-x11.h"
+#include "compositor/meta-window-actor-private.h"
 #include "core/boxes-private.h"
 #include "core/frame.h"
 #include "core/meta-workspace-manager-private.h"
@@ -1324,6 +1325,18 @@ meta_window_x11_current_workspace_changed (MetaWindow *window)
   meta_x11_error_trap_pop (x11_display);
 }
 
+static gboolean
+meta_window_x11_can_freeze_commits (MetaWindow *window)
+{
+  MetaWindowActor *window_actor;
+
+  window_actor = meta_window_actor_from_window (window);
+  if (window_actor == NULL)
+    return FALSE;
+
+  return meta_window_actor_can_freeze_commits (window_actor);
+}
+
 static void
 meta_window_x11_move_resize_internal (MetaWindow                *window,
                                       MetaGravity                gravity,
@@ -1475,7 +1488,8 @@ meta_window_x11_move_resize_internal (MetaWindow                *window,
   /* If resizing, freeze commits - This is for Xwayland, and a no-op on Xorg */
   if (need_resize_client || need_resize_frame)
     {
-      if (!meta_window_x11_should_thaw_after_paint (window))
+      if (meta_window_x11_can_freeze_commits (window) &&
+          !meta_window_x11_should_thaw_after_paint (window))
         {
           meta_window_x11_set_thaw_after_paint (window, TRUE);
           meta_window_x11_freeze_commits (window);
-- 
2.29.2


From 989ef121f6a24b9b5b532610dac3b96fab34bbd3 Mon Sep 17 00:00:00 2001
From: Robert Mader <robert.mader@posteo.de>
Date: Fri, 22 Jan 2021 14:14:50 +0100
Subject: [PATCH 13/26] feedback-actor: Add API to set and get geometry scale

Analogous to MetaWindowActor. Also take it into account for positioning
when an anchor is set.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1683>

(cherry picked from commit dfa659b5b55538652cb13abea1ce10978c98904e)
---
 src/compositor/meta-feedback-actor-private.h |  5 +++
 src/compositor/meta-feedback-actor.c         | 36 ++++++++++++++++++--
 2 files changed, 39 insertions(+), 2 deletions(-)

diff --git a/src/compositor/meta-feedback-actor-private.h b/src/compositor/meta-feedback-actor-private.h
index 530bb2dc29..86cacb3607 100644
--- a/src/compositor/meta-feedback-actor-private.h
+++ b/src/compositor/meta-feedback-actor-private.h
@@ -62,4 +62,9 @@ void meta_feedback_actor_set_position (MetaFeedbackActor  *self,
 void meta_feedback_actor_update (MetaFeedbackActor  *self,
                                  const ClutterEvent *event);
 
+void meta_feedback_actor_set_geometry_scale (MetaFeedbackActor *self,
+                                             int                geometry_scale);
+
+int meta_feedback_actor_get_geometry_scale (MetaFeedbackActor *self);
+
 #endif /* META_FEEDBACK_ACTOR_PRIVATE_H */
diff --git a/src/compositor/meta-feedback-actor.c b/src/compositor/meta-feedback-actor.c
index c8eb0fcac0..d3277ec3aa 100644
--- a/src/compositor/meta-feedback-actor.c
+++ b/src/compositor/meta-feedback-actor.c
@@ -44,6 +44,8 @@ struct _MetaFeedbackActorPrivate
   float anchor_y;
   float pos_x;
   float pos_y;
+
+  int geometry_scale;
 };
 
 G_DEFINE_TYPE_WITH_PRIVATE (MetaFeedbackActor, meta_feedback_actor, CLUTTER_TYPE_ACTOR)
@@ -65,8 +67,10 @@ meta_feedback_actor_update_position (MetaFeedbackActor *self)
   MetaFeedbackActorPrivate *priv = meta_feedback_actor_get_instance_private (self);
 
   clutter_actor_set_position (CLUTTER_ACTOR (self),
-                              priv->pos_x - priv->anchor_x,
-                              priv->pos_y - priv->anchor_y);
+                              priv->pos_x -
+                              (priv->anchor_x * priv->geometry_scale),
+                              priv->pos_y -
+                              (priv->anchor_y * priv->geometry_scale));
 }
 
 static void
@@ -249,3 +253,31 @@ meta_feedback_actor_update (MetaFeedbackActor  *self,
   clutter_event_get_position (event, &point);
   meta_feedback_actor_set_position (self, point.x, point.y);
 }
+
+void
+meta_feedback_actor_set_geometry_scale (MetaFeedbackActor *self,
+                                        int                geometry_scale)
+{
+  MetaFeedbackActorPrivate *priv =
+    meta_feedback_actor_get_instance_private (self);
+  CoglMatrix child_transform;
+
+  if (priv->geometry_scale == geometry_scale)
+    return;
+
+  priv->geometry_scale = geometry_scale;
+
+  cogl_matrix_init_identity (&child_transform);
+  cogl_matrix_scale (&child_transform, geometry_scale, geometry_scale, 1);
+  clutter_actor_set_child_transform (CLUTTER_ACTOR (self),
+                                     &child_transform);
+}
+
+int
+meta_feedback_actor_get_geometry_scale (MetaFeedbackActor *self)
+{
+  MetaFeedbackActorPrivate *priv =
+    meta_feedback_actor_get_instance_private (self);
+
+  return priv->geometry_scale;
+}
-- 
2.29.2


From 5628d0423fd8c822fef057f913d96a79eb40b6b2 Mon Sep 17 00:00:00 2001
From: Robert Mader <robert.mader@posteo.de>
Date: Fri, 22 Jan 2021 15:29:08 +0100
Subject: [PATCH 14/26] wayland/dnd-surface: Use new API to set geometry scale
 of feedback actor

The removed parts are now all handled in MetaFeedbackActor.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1683>

(cherry picked from commit 04eeeb78d12f653abad32755ff041f4b3705c0e3)
---
 src/wayland/meta-wayland-dnd-surface.c | 15 +++------------
 1 file changed, 3 insertions(+), 12 deletions(-)

diff --git a/src/wayland/meta-wayland-dnd-surface.c b/src/wayland/meta-wayland-dnd-surface.c
index c3b0f7557b..0786b99d9f 100644
--- a/src/wayland/meta-wayland-dnd-surface.c
+++ b/src/wayland/meta-wayland-dnd-surface.c
@@ -30,7 +30,6 @@ struct _MetaWaylandSurfaceRoleDND
   MetaWaylandActorSurface parent;
   int32_t pending_offset_x;
   int32_t pending_offset_y;
-  int geometry_scale;
 };
 
 G_DEFINE_TYPE (MetaWaylandSurfaceRoleDND,
@@ -123,27 +122,19 @@ dnd_subsurface_sync_actor_state (MetaWaylandActorSurface *actor_surface)
 
   geometry_scale =
     meta_wayland_actor_surface_get_geometry_scale (actor_surface);
+  meta_feedback_actor_set_geometry_scale (feedback_actor, geometry_scale);
 
   meta_feedback_actor_get_anchor (feedback_actor, &anchor_x, &anchor_y);
-  anchor_x -= surface_role_dnd->pending_offset_x * geometry_scale;
-  anchor_y -= surface_role_dnd->pending_offset_y * geometry_scale;
+  anchor_x -= surface_role_dnd->pending_offset_x;
+  anchor_y -= surface_role_dnd->pending_offset_y;
   meta_feedback_actor_set_anchor (feedback_actor, anchor_x, anchor_y);
 
-  if (surface_role_dnd->geometry_scale != geometry_scale)
-    {
-      surface_role_dnd->geometry_scale = geometry_scale;
-      clutter_actor_set_scale (CLUTTER_ACTOR (surface_actor),
-                               geometry_scale,
-                               geometry_scale);
-    }
-
   actor_surface_class->sync_actor_state (actor_surface);
 }
 
 static void
 meta_wayland_surface_role_dnd_init (MetaWaylandSurfaceRoleDND *role)
 {
-  role->geometry_scale = 1;
 }
 
 static void
-- 
2.29.2


From 22ab643c568932b8877a12053fe56ba71658785d Mon Sep 17 00:00:00 2001
From: Robert Mader <robert.mader@posteo.de>
Date: Sun, 31 Jan 2021 17:33:21 +0100
Subject: [PATCH 15/26] compositor/dnd-actor: Take geometry scale into account
 on DnD-cancel

Technically this is still wrong if the source actor or dnd actor are
transformed in other ways. However geometry scale is the by far most
common case and we currently lack convenience API in Clutter to
easily compute the right values.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1683>

(cherry picked from commit 7da34f154b315131d06e6ccb6728600238e1e236)
---
 src/compositor/meta-dnd-actor.c | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

diff --git a/src/compositor/meta-dnd-actor.c b/src/compositor/meta-dnd-actor.c
index 31a01db90b..80bffdeb75 100644
--- a/src/compositor/meta-dnd-actor.c
+++ b/src/compositor/meta-dnd-actor.c
@@ -28,6 +28,7 @@
 #include "config.h"
 
 #include "compositor/meta-dnd-actor-private.h"
+#include "compositor/meta-window-actor-private.h"
 
 #include "clutter/clutter.h"
 
@@ -206,16 +207,29 @@ meta_dnd_actor_drag_finish (MetaDnDActor *self,
 
       if (CLUTTER_ACTOR_IS_VISIBLE (self->drag_origin))
         {
+          MetaWindowActor *origin_actor;
           float anchor_x, anchor_y;
           graphene_point_t dest;
+          int origin_geometry_scale;
+          int feedback_geometry_scale;
 
           clutter_actor_get_transformed_position (self->drag_origin,
                                                   &dest.x, &dest.y);
+
+          origin_actor = meta_window_actor_from_actor (self->drag_origin);
+          g_return_if_fail (origin_actor);
+          origin_geometry_scale =
+            meta_window_actor_get_geometry_scale (origin_actor);
+
           meta_feedback_actor_get_anchor (META_FEEDBACK_ACTOR (self),
                                           &anchor_x, &anchor_y);
+          feedback_geometry_scale =
+            meta_feedback_actor_get_geometry_scale (META_FEEDBACK_ACTOR (self));
 
-          dest.x += self->drag_start_x - anchor_x;
-          dest.y += self->drag_start_y - anchor_y;
+          dest.x += ((self->drag_start_x * origin_geometry_scale) -
+                     (anchor_x * feedback_geometry_scale));
+          dest.y += ((self->drag_start_y * origin_geometry_scale) -
+                     (anchor_y * feedback_geometry_scale));
           clutter_actor_set_position (actor, dest.x, dest.y);
         }
 
-- 
2.29.2


From 78c61f557f7c3ff6b604bcb6142d9fed143b50cf Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Mon, 8 Feb 2021 17:34:00 +0000
Subject: [PATCH 16/26] clutter/timeline: Clear stage view listener when actor
 destroyed

We might have a stage view listener attached to the stage itself if the
actor didn't have a suitable frame clock when the actor was associated
with the timeline. We'd then listen to stage-views-changed signals on
the stage itself to be able to attach to a frame clock when one
appeared.

What went wrong is that if an actor that didn't have a frameclock was
associated with a timeline, but then destroyed, the timeline would
disassociate itself from the actor, but it'd still listen on the
stage-views-changed signal on the stage. This would be in itself
harmless, until the timeline itself is destroyed, as at this point, it
wouldn't clean up the stage-views-changed listener on the stage, as it's
assumed to only be valid when there is an actor attached.

Fix this issue by cleaning up the stage's stage-views-changed listener
when the actor is destroyed, as we wouldn't be able to make use of it by
then anyway.

Closes: https://gitlab.gnome.org/GNOME/gnome-shell/-/issues/3323
Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1719>


(cherry picked from commit 4145fbbae4deb2de830c00a386324929b2ae0d5e)
---
 clutter/clutter/clutter-timeline.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/clutter/clutter/clutter-timeline.c b/clutter/clutter/clutter-timeline.c
index 23392fc99d..f7b9b98a75 100644
--- a/clutter/clutter/clutter-timeline.c
+++ b/clutter/clutter/clutter-timeline.c
@@ -311,6 +311,7 @@ on_actor_destroyed (ClutterActor    *actor,
 {
   ClutterTimelinePrivate *priv = timeline->priv;
 
+  g_clear_signal_handler (&priv->stage_stage_views_handler_id, priv->stage);
   priv->actor = NULL;
 }
 
-- 
2.29.2


From 26008c4527b3c7e2c835e25b72fa73c48b1644f8 Mon Sep 17 00:00:00 2001
From: Carlos Garnacho <carlosg@gnome.org>
Date: Mon, 8 Feb 2021 20:19:38 +0100
Subject: [PATCH 17/26] wayland: Make XDnD grab unlink source/offer manually

This currently happens by default whenever the grab is finished.
We want to eventually do this manually everywhere, so start here.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1720>

(cherry picked from 3799606fc2324f3b9c6f4cfb6f79cdebafe624b0)
---
 src/wayland/meta-xwayland-dnd.c | 18 +++++++++++++-----
 1 file changed, 13 insertions(+), 5 deletions(-)

diff --git a/src/wayland/meta-xwayland-dnd.c b/src/wayland/meta-xwayland-dnd.c
index cd0f0d3eaa..f3251fc8b3 100644
--- a/src/wayland/meta-xwayland-dnd.c
+++ b/src/wayland/meta-xwayland-dnd.c
@@ -340,14 +340,22 @@ xdnd_send_status (MetaXWaylandDnd *dnd,
 }
 
 static void
-meta_xwayland_end_dnd_grab (MetaWaylandDataDevice *data_device)
+meta_xwayland_end_dnd_grab (MetaWaylandDataDevice *data_device,
+                            gboolean               success)
 {
   Display *xdisplay = GDK_DISPLAY_XDISPLAY (gdk_display_get_default ());
   MetaWaylandCompositor *compositor = meta_wayland_compositor_get_default ();
   MetaXWaylandManager *manager = &compositor->xwayland_manager;
+  MetaWaylandDragGrab *drag_grab = compositor->seat->data_device.current_grab;
   MetaXWaylandDnd *dnd = manager->dnd;
 
-  meta_wayland_data_device_end_drag (data_device);
+  if (drag_grab)
+    {
+      if (!success && dnd->source)
+        meta_wayland_data_source_set_current_offer (dnd->source, NULL);
+
+      meta_wayland_data_device_end_drag (data_device);
+    }
 
   XMoveResizeWindow (xdisplay, dnd->dnd_window, -1, -1, 1, 1);
   XUnmapWindow (xdisplay, dnd->dnd_window);
@@ -716,7 +724,7 @@ drag_xgrab_button (MetaWaylandPointerGrab *grab,
       (!meta_wayland_drag_grab_get_focus ((MetaWaylandDragGrab *) grab) ||
        meta_wayland_data_source_get_current_action (data_source) ==
        WL_DATA_DEVICE_MANAGER_DND_ACTION_NONE))
-    meta_xwayland_end_dnd_grab (&seat->data_device);
+    meta_xwayland_end_dnd_grab (&seat->data_device, FALSE);
 }
 
 static const MetaWaylandPointerGrabInterface drag_xgrab_interface = {
@@ -859,7 +867,7 @@ meta_xwayland_dnd_handle_client_message (MetaWaylandCompositor *compositor,
         {
           dnd->client_message_timestamp = event->data.l[2];
           meta_wayland_surface_drag_dest_drop (drag_focus);
-          meta_xwayland_end_dnd_grab (&seat->data_device);
+          meta_xwayland_end_dnd_grab (&seat->data_device, TRUE);
           return TRUE;
         }
     }
@@ -898,7 +906,7 @@ meta_xwayland_dnd_handle_xfixes_selection_notify (MetaWaylandCompositor *composi
     }
   else if (event->owner == None)
     {
-      meta_xwayland_end_dnd_grab (data_device);
+      meta_xwayland_end_dnd_grab (data_device, FALSE);
     }
 
   return FALSE;
-- 
2.29.2


From ee26aea10152e8efce860857e754cf0707cd1a4b Mon Sep 17 00:00:00 2001
From: Carlos Garnacho <carlosg@gnome.org>
Date: Mon, 8 Feb 2021 20:20:22 +0100
Subject: [PATCH 18/26] wayland: Plug XDnD drag source leak

This object is just being detached, with no code unref'ing it. Do
this whenever the XDnD selection goes unowned, usually a good
indication that the drag source no longer is one.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1720>

(cherry-picked from 8e01ea1e045c2ef1f417154c5f55360ffb14ad9e)
---
 src/wayland/meta-xwayland-dnd.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/wayland/meta-xwayland-dnd.c b/src/wayland/meta-xwayland-dnd.c
index f3251fc8b3..eb667fde54 100644
--- a/src/wayland/meta-xwayland-dnd.c
+++ b/src/wayland/meta-xwayland-dnd.c
@@ -907,6 +907,7 @@ meta_xwayland_dnd_handle_xfixes_selection_notify (MetaWaylandCompositor *composi
   else if (event->owner == None)
     {
       meta_xwayland_end_dnd_grab (data_device, FALSE);
+      g_clear_object (&dnd->source);
     }
 
   return FALSE;
-- 
2.29.2


From 6f5832da900483d808d2a684059edd474d61d9e3 Mon Sep 17 00:00:00 2001
From: Carlos Garnacho <carlosg@gnome.org>
Date: Mon, 8 Feb 2021 20:22:35 +0100
Subject: [PATCH 19/26] wayland: Manually detach source/offer on failure paths

Adapt more paths to manual detaching of source/offer. This is still
done automatically when the grab is finished.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1720>

(cherry picked from commit 0f9dc84d3b1a6d80e8ec9389804f5212168d3b78)
---
 src/wayland/meta-wayland-data-device.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/wayland/meta-wayland-data-device.c b/src/wayland/meta-wayland-data-device.c
index 9231ac5942..9311fd55d0 100644
--- a/src/wayland/meta-wayland-data-device.c
+++ b/src/wayland/meta-wayland-data-device.c
@@ -501,6 +501,7 @@ keyboard_drag_grab_key (MetaWaylandKeyboardGrab *grab,
 
       drag_grab = wl_container_of (grab, drag_grab, keyboard_grab);
       meta_wayland_data_source_cancel (drag_grab->drag_data_source);
+      meta_wayland_data_source_set_current_offer (drag_grab->drag_data_source, NULL);
       meta_dnd_actor_drag_finish (META_DND_ACTOR (drag_grab->feedback_actor), FALSE);
       drag_grab->feedback_actor = NULL;
       data_device_end_drag_grab (drag_grab);
@@ -547,6 +548,7 @@ destroy_data_device_origin (struct wl_listener *listener, void *data)
   drag_grab->drag_origin = NULL;
   meta_wayland_data_device_set_dnd_source (&drag_grab->seat->data_device, NULL);
   unset_selection_source (&drag_grab->seat->data_device, META_SELECTION_DND);
+  meta_wayland_data_source_set_current_offer (drag_grab->drag_data_source, NULL);
   data_device_end_drag_grab (drag_grab);
 }
 
-- 
2.29.2


From 2818cfda89dc0c12483a9e892316c7c375a18b9f Mon Sep 17 00:00:00 2001
From: Carlos Garnacho <carlosg@gnome.org>
Date: Mon, 8 Feb 2021 20:23:22 +0100
Subject: [PATCH 20/26] wayland: Avoid automatically decoupling source/offer
 after grab

In the case that DnD is performed and succeeds, we want to release
the grab early, and let the transfer IPC happen in the back. For
that to happen without a hitch, drag source and offer must be left
related to each other after undoing the grab, even though the default
ungrabbing code does that automatically (indirectly, by unsetting the
drag focus).

In these cases, we used to manually unset the current source, so
this decoupling was skipped. Notably, one missed case is X11 DnD,
so we might end up with the situation there that DnD did succeed,
transfer is ongoing, but the source and offer are already decoupled,
this confused the machinery and missed the finishing XdndFinished
to be emitted to the X11 drag source.

The prior commits prepared for this source/offer decoupling being
a manual operation, this commit avoids doing this automatically
when ungrabbing.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1720>

(cherry picked from commit 698fe3f1a98ae492335cfe718bc8818c14e813de)
---
 src/wayland/meta-wayland-data-device.c | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/src/wayland/meta-wayland-data-device.c b/src/wayland/meta-wayland-data-device.c
index 9311fd55d0..e40a58c29e 100644
--- a/src/wayland/meta-wayland-data-device.c
+++ b/src/wayland/meta-wayland-data-device.c
@@ -352,6 +352,7 @@ drag_grab_motion (MetaWaylandPointerGrab *grab,
 static void
 data_device_end_drag_grab (MetaWaylandDragGrab *drag_grab)
 {
+  meta_wayland_drag_grab_set_source (drag_grab, NULL);
   meta_wayland_drag_grab_set_focus (drag_grab, NULL);
 
   if (drag_grab->drag_origin)
@@ -366,8 +367,6 @@ data_device_end_drag_grab (MetaWaylandDragGrab *drag_grab)
       wl_list_remove (&drag_grab->drag_icon_listener.link);
     }
 
-  meta_wayland_drag_grab_set_source (drag_grab, NULL);
-
   if (drag_grab->feedback_actor)
     {
       clutter_actor_remove_all_children (drag_grab->feedback_actor);
@@ -448,9 +447,6 @@ drag_grab_button (MetaWaylandPointerGrab *grab,
           meta_wayland_data_source_has_target (source) &&
           meta_wayland_data_source_get_current_action (source))
         {
-          /* Detach the data source from the grab, it's meant to live longer */
-          meta_wayland_drag_grab_set_source (drag_grab, NULL);
-
           meta_wayland_surface_drag_dest_drop (drag_grab->drag_focus);
           meta_wayland_data_source_notify_drop_performed (source);
 
-- 
2.29.2


From cb7ac99fe51a5d3f3e09ee0667f45be3995e9359 Mon Sep 17 00:00:00 2001
From: Olivier Fourdan <ofourdan@redhat.com>
Date: Thu, 11 Feb 2021 17:53:59 +0100
Subject: [PATCH 21/26] window: Add "is_focus_async" API

X11 clients can use different models of input handling, of which some
may not result focus being set synchronously.

For such clients, meta_focus_window() will not change the focus itself
but rely on the client itself to set the input focus on the desired
window.

Add a new MetaWindow API to check when dealing with such a window.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1716>
(cherry picked from commit 6438919a89a4d0a0430321bedd68689a2c2f6e90)
---
 src/core/window-private.h         |  2 ++
 src/core/window.c                 |  6 ++++++
 src/wayland/meta-window-wayland.c |  7 +++++++
 src/x11/window-x11.c              | 11 +++++++++++
 4 files changed, 26 insertions(+)

diff --git a/src/core/window-private.h b/src/core/window-private.h
index 3872479aae..1d7ec70972 100644
--- a/src/core/window-private.h
+++ b/src/core/window-private.h
@@ -602,6 +602,7 @@ struct _MetaWindowClass
   gboolean (*is_stackable)        (MetaWindow *window);
   gboolean (*can_ping)            (MetaWindow *window);
   gboolean (*are_updates_frozen)  (MetaWindow *window);
+  gboolean (*is_focus_async)      (MetaWindow *window);
 
   MetaStackLayer (*calculate_layer) (MetaWindow *window);
 
@@ -872,4 +873,5 @@ void meta_window_force_restore_shortcuts (MetaWindow         *window,
 gboolean meta_window_shortcuts_inhibited (MetaWindow         *window,
                                           ClutterInputDevice *source);
 gboolean meta_window_is_stackable (MetaWindow *window);
+gboolean meta_window_is_focus_async (MetaWindow *window);
 #endif
diff --git a/src/core/window.c b/src/core/window.c
index 3180d15bf2..e1c58fc7b6 100644
--- a/src/core/window.c
+++ b/src/core/window.c
@@ -8589,6 +8589,12 @@ meta_window_is_stackable (MetaWindow *window)
   return META_WINDOW_GET_CLASS (window)->is_stackable (window);
 }
 
+gboolean
+meta_window_is_focus_async (MetaWindow *window)
+{
+  return META_WINDOW_GET_CLASS (window)->is_focus_async (window);
+}
+
 MetaStackLayer
 meta_window_calculate_layer (MetaWindow *window)
 {
diff --git a/src/wayland/meta-window-wayland.c b/src/wayland/meta-window-wayland.c
index 89ee0c292c..45b79ec93c 100644
--- a/src/wayland/meta-window-wayland.c
+++ b/src/wayland/meta-window-wayland.c
@@ -724,6 +724,12 @@ meta_window_wayland_are_updates_frozen (MetaWindow *window)
   return !wl_window->has_been_shown;
 }
 
+static gboolean
+meta_window_wayland_is_focus_async (MetaWindow *window)
+{
+  return FALSE;
+}
+
 static MetaStackLayer
 meta_window_wayland_calculate_layer (MetaWindow *window)
 {
@@ -780,6 +786,7 @@ meta_window_wayland_class_init (MetaWindowWaylandClass *klass)
   window_class->calculate_layer = meta_window_wayland_calculate_layer;
   window_class->map = meta_window_wayland_map;
   window_class->unmap = meta_window_wayland_unmap;
+  window_class->is_focus_async = meta_window_wayland_is_focus_async;
 }
 
 MetaWindow *
diff --git a/src/x11/window-x11.c b/src/x11/window-x11.c
index 980a1510a1..c0c8734842 100644
--- a/src/x11/window-x11.c
+++ b/src/x11/window-x11.c
@@ -2058,6 +2058,16 @@ meta_window_x11_impl_always_update_shape (MetaWindow *window)
   return FALSE;
 }
 
+static gboolean
+meta_window_x11_is_focus_async (MetaWindow *window)
+{
+  MetaWindowX11 *window_x11 = META_WINDOW_X11 (window);
+  MetaWindowX11Private *priv =
+    meta_window_x11_get_instance_private (window_x11);
+
+  return !window->input && priv->wm_take_focus;
+}
+
 static void
 meta_window_x11_class_init (MetaWindowX11Class *klass)
 {
@@ -2088,6 +2098,7 @@ meta_window_x11_class_init (MetaWindowX11Class *klass)
   window_class->calculate_layer = meta_window_x11_calculate_layer;
   window_class->map = meta_window_x11_map;
   window_class->unmap = meta_window_x11_unmap;
+  window_class->is_focus_async = meta_window_x11_is_focus_async;
 
   klass->freeze_commits = meta_window_x11_impl_freeze_commits;
   klass->thaw_commits = meta_window_x11_impl_thaw_commits;
-- 
2.29.2


From 2d34ee088adc5d9d816616783eec92c52d1758c9 Mon Sep 17 00:00:00 2001
From: Olivier Fourdan <ofourdan@redhat.com>
Date: Mon, 8 Feb 2021 09:54:43 +0100
Subject: [PATCH 22/26] core: Account for the globally active input case
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Commit afa43154 tried to make sure the focus was properly changed when
calling focus_default_window() by checking the focused window just after
trying to set the focus.

However, the X11 “Inter-Client Communication Conventions Manual” version
2.0 (ICCCM 2 for short) states that some X11 client may want to use a so
called “globally active input” model in which case the client expects
keyboard input and set input focus even when it's not one of its own
window.

To comply with this, when dealing with such clients, mutter will not
change the focus and send a WM_TAKE_FOCUS message instead.

That mechanism will defeat the logic introduced by commit afa43154
because the focused window is not changed in this case. As a result, the
input focus will fallback to the no-focus window.

To avoid this, only check that the focus change occurred for windows
using a synchronous focus model.

v2: Split specific test for "globally active input" model (Florian).
v3: Remove the check for window->unmanaging which is useless (Jonas).

Fixes: afa43154 - "core: Make sure focus_default_window() worked"
Close: https://gitlab.gnome.org/GNOME/mutter/-/issues/1620
Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1716>
(cherry picked from commit 2432508db78a235abc5cee198fb94043625db65f)
---
 src/core/workspace.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/src/core/workspace.c b/src/core/workspace.c
index a80560b7b4..a6edb5fffd 100644
--- a/src/core/workspace.c
+++ b/src/core/workspace.c
@@ -1367,6 +1367,14 @@ try_to_set_focus_and_check (MetaWindow *window,
 {
   meta_window_focus (window, timestamp);
 
+  /* meta_focus_window() will not change focus for clients using the
+   * "globally active input" model of input handling, hence defeating
+   * the assumption that focus should be changed for such windows.
+   * See https://tronche.com/gui/x/icccm/sec-4.html#s-4.1.7
+   */
+  if (meta_window_is_focus_async (window))
+    return TRUE;
+
   /* meta_window_focus() does not guarantee that focus will end up
    * where we expect, it can fail for various reasons, better check
    * it did not actually changed or even left focus to the window we
-- 
2.29.2


From 95b683ae2e912e07aade5308fca90d8a90d3b8aa Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Wed, 10 Feb 2021 09:39:18 +0100
Subject: [PATCH 23/26] clutter/stage-view: Disable double buffered shadow
 buffering

To make the double buffered shadow buffer damaged tiles detection
feasable, a new EGL extension is needed for creating FBO's backed by
a custom CPU memory buffer, instead of DMA buffers, as DMA buffers can
be very slow to read, much slower than just painting the shadow buffer
directly.

Leave the code there, since such an EGL extension is intended to be
added, but hide it behind an env var so that it isn't enabled by
accident.

(cherry picked from commit ad5b5f2c57dd0dcb9e586ea09486eebff89fb94d)

https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1724

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1743>
---
 clutter/clutter/clutter-stage-view.c | 18 +++++++++++-------
 1 file changed, 11 insertions(+), 7 deletions(-)

diff --git a/clutter/clutter/clutter-stage-view.c b/clutter/clutter/clutter-stage-view.c
index 00a4d5ad14..ccc07cd6c8 100644
--- a/clutter/clutter/clutter-stage-view.c
+++ b/clutter/clutter/clutter-stage-view.c
@@ -415,15 +415,19 @@ init_shadowfb (ClutterStageView *view)
   height = cogl_framebuffer_get_height (priv->framebuffer);
   cogl_context = cogl_framebuffer_get_context (priv->framebuffer);
 
-  if (init_dma_buf_shadowfbs (view, cogl_context, width, height, &error))
+  if (g_strcmp0 (g_getenv ("MUTTER_DEBUG_ENABLE_DOUBLE_SHADOWFB"), "1") == 0)
     {
-      g_message ("Initialized double buffered shadow fb for %s", priv->name);
-      return;
-    }
+      if (init_dma_buf_shadowfbs (view, cogl_context, width, height, &error))
+        {
+          g_message ("Initialized double buffered shadow fb for %s",
+                     priv->name);
+          return;
+        }
 
-  g_warning ("Failed to initialize double buffered shadow fb for %s: %s",
-             priv->name, error->message);
-  g_clear_error (&error);
+      g_warning ("Failed to initialize double buffered shadow fb for %s: %s",
+                 priv->name, error->message);
+      g_clear_error (&error);
+    }
 
   if (!init_fallback_shadowfb (view, cogl_context, width, height, &error))
     {
-- 
2.29.2


From b4192c4550fef7c6b259fec1ada82c4aa3a00df2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Thu, 4 Mar 2021 19:11:12 +0100
Subject: [PATCH 24/26] compositor/x11: Notify the sync ring about frames on
 updates

The sync ring has an API about "frames", where it is notified about
the end of frames. However, its "insert wait" call is done before
updates, meaning that some "insert waits" will never see the "after
frame" if there was no frame drawn. This will cause mismatching in the
frame counting, causing freezes in the synchronization until something
else triggers an actual frame, effectively "unfreezing" the sync ring.

Fix this by not only notifying the sync ring about frames when there
were actual frames drawn, but also on plain updates which didn't result
in a drawn frame.

Related: https://gitlab.gnome.org/GNOME/mutter/-/issues/1516
Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1754>
(cherry picked from commit 44a4e616658edb2a21a9612cfd3a41742a1ca427)
---
 src/compositor/meta-compositor-x11.c | 35 ++++++++++++++--------------
 1 file changed, 18 insertions(+), 17 deletions(-)

diff --git a/src/compositor/meta-compositor-x11.c b/src/compositor/meta-compositor-x11.c
index e7da103e3a..339ef03849 100644
--- a/src/compositor/meta-compositor-x11.c
+++ b/src/compositor/meta-compositor-x11.c
@@ -40,6 +40,7 @@ struct _MetaCompositorX11
   Window output;
 
   gulong before_update_handler_id;
+  gulong after_update_handler_id;
 
   gboolean frame_has_updated_xsurfaces;
   gboolean have_x11_sync_object;
@@ -363,35 +364,32 @@ on_before_update (ClutterStage     *stage,
 }
 
 static void
-meta_compositor_x11_before_paint (MetaCompositor   *compositor,
-                                  ClutterStageView *stage_view)
+on_after_update (ClutterStage     *stage,
+                 ClutterStageView *stage_view,
+                 MetaCompositor   *compositor)
 {
   MetaCompositorX11 *compositor_x11 = META_COMPOSITOR_X11 (compositor);
-  MetaCompositorClass *parent_class;
 
-  maybe_unredirect_top_window (compositor_x11);
+  if (compositor_x11->frame_has_updated_xsurfaces)
+    {
+      if (compositor_x11->have_x11_sync_object)
+        compositor_x11->have_x11_sync_object = meta_sync_ring_after_frame ();
 
-  parent_class = META_COMPOSITOR_CLASS (meta_compositor_x11_parent_class);
-  parent_class->before_paint (compositor, stage_view);
+      compositor_x11->frame_has_updated_xsurfaces = FALSE;
+    }
 }
 
 static void
-meta_compositor_x11_after_paint (MetaCompositor   *compositor,
-                                 ClutterStageView *stage_view)
+meta_compositor_x11_before_paint (MetaCompositor   *compositor,
+                                  ClutterStageView *stage_view)
 {
   MetaCompositorX11 *compositor_x11 = META_COMPOSITOR_X11 (compositor);
   MetaCompositorClass *parent_class;
 
-  if (compositor_x11->frame_has_updated_xsurfaces)
-    {
-      if (compositor_x11->have_x11_sync_object)
-        compositor_x11->have_x11_sync_object = meta_sync_ring_after_frame ();
-
-      compositor_x11->frame_has_updated_xsurfaces = FALSE;
-    }
+  maybe_unredirect_top_window (compositor_x11);
 
   parent_class = META_COMPOSITOR_CLASS (meta_compositor_x11_parent_class);
-  parent_class->after_paint (compositor, stage_view);
+  parent_class->before_paint (compositor, stage_view);
 }
 
 static void
@@ -465,6 +463,9 @@ meta_compositor_x11_constructed (GObject *object)
   compositor_x11->before_update_handler_id =
     g_signal_connect (stage, "before-update",
                       G_CALLBACK (on_before_update), compositor);
+  compositor_x11->after_update_handler_id =
+    g_signal_connect (stage, "after-update",
+                      G_CALLBACK (on_after_update), compositor);
 
   G_OBJECT_CLASS (meta_compositor_x11_parent_class)->constructed (object);
 }
@@ -483,6 +484,7 @@ meta_compositor_x11_dispose (GObject *object)
     }
 
   g_clear_signal_handler (&compositor_x11->before_update_handler_id, stage);
+  g_clear_signal_handler (&compositor_x11->after_update_handler_id, stage);
 
   G_OBJECT_CLASS (meta_compositor_x11_parent_class)->dispose (object);
 }
@@ -504,7 +506,6 @@ meta_compositor_x11_class_init (MetaCompositorX11Class *klass)
   compositor_class->manage = meta_compositor_x11_manage;
   compositor_class->unmanage = meta_compositor_x11_unmanage;
   compositor_class->before_paint = meta_compositor_x11_before_paint;
-  compositor_class->after_paint = meta_compositor_x11_after_paint;
   compositor_class->remove_window = meta_compositor_x11_remove_window;
   compositor_class->monotonic_to_high_res_xserver_time =
    meta_compositor_x11_monotonic_to_high_res_xserver_time;
-- 
2.29.2


From 894a6d0935e61398e246482ebff423e3ad84d50f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Fri, 5 Mar 2021 09:55:34 +0100
Subject: [PATCH 25/26] window-actor/x11: Queue full actor redraw when redraw
 queued

With frame timings, we might end up in a situation where a frame drawn
is expected, but no damage was posted. Up until now, mutter handled
this, if the window wasn't completely hidden, by posting a 1x1 pixel
damage region. The problem with this is that we now are a bit more
aggressive optimizing away no-op redraws, meaning we still might end up
not drawing, making things get stuck.

Fix this by doing a full actor redraw, as that is the only reliable way
to both a new frame being drawn, as well as the actor in question itself
getting redrawn.

Closes: https://gitlab.gnome.org/GNOME/mutter/-/issues/1516
Closes: https://gitlab.gnome.org/GNOME/gnome-shell/-/issues/3369
Closes: https://gitlab.gnome.org/GNOME/mutter/-/issues/1471
Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1754>
(cherry picked from commit 9b90b5a1b0856144d21e1a70e306d3f769a2e2f0)
---
 src/compositor/meta-window-actor-x11.c | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/src/compositor/meta-window-actor-x11.c b/src/compositor/meta-window-actor-x11.c
index 676487716a..e4e579e89f 100644
--- a/src/compositor/meta-window-actor-x11.c
+++ b/src/compositor/meta-window-actor-x11.c
@@ -483,10 +483,12 @@ meta_window_actor_x11_queue_frame_drawn (MetaWindowActor *actor,
        * damage or any unobscured, or while we had the window frozen
        * (e.g. during an interactive resize.) We need to make sure that the
        * before_paint/after_paint functions get called, enabling us to
-       * send a _NET_WM_FRAME_DRAWN. We do a 1-pixel redraw to get
-       * consistent timing with non-empty frames. If the window
-       * is completely obscured, or completely off screen we fire off the
-       * send_frame_messages timeout.
+       * send a _NET_WM_FRAME_DRAWN. We need to do full damage to ensure that
+       * the window is actually repainted, otherwise any subregion we would pass
+       * might end up being either outside of any stage view, or be occluded by
+       * something else, which could potentially result in no frame being drawn
+       * after all. If the window is completely obscured, or completely off
+       * screen we fire off the send_frame_messages timeout.
        */
       if (is_obscured ||
           !clutter_actor_peek_stage_views (CLUTTER_ACTOR (actor)))
@@ -495,8 +497,7 @@ meta_window_actor_x11_queue_frame_drawn (MetaWindowActor *actor,
         }
       else if (surface)
         {
-          const cairo_rectangle_int_t clip = { 0, 0, 1, 1 };
-          clutter_actor_queue_redraw_with_clip (CLUTTER_ACTOR (surface), &clip);
+          clutter_actor_queue_redraw (CLUTTER_ACTOR (surface));
           actor_x11->repaint_scheduled = TRUE;
         }
     }
-- 
2.29.2


From 30c542ddc3f73aa625c5f88167da6700c45b9f33 Mon Sep 17 00:00:00 2001
From: Sebastian Keller <skeller@gnome.org>
Date: Sat, 27 Feb 2021 00:00:25 +0000
Subject: [PATCH 26/26] frame: Fix crash when clicking below titlebar with
 broken gtk themes

When a gtk theme uses larger shadows for the unfocused state than for
the focused one, this can cause a crash in meta_frame_left_click_event.
Since whether to call meta_frame_left_click_event is decided based on
the decoration size before focusing and the control that was clicked on
after focusing, this can result in an event handled in
meta_frame_left_click_event being on the client area.

Fixes https://gitlab.gnome.org/GNOME/mutter/-/issues/1668

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1748>


(cherry picked from commit c2968c89fef3d67f161cb01481a8a2939c45a425)
---
 src/ui/frames.c | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/src/ui/frames.c b/src/ui/frames.c
index 5cbfb09e94..5e39616309 100644
--- a/src/ui/frames.c
+++ b/src/ui/frames.c
@@ -1112,6 +1112,15 @@ meta_frame_left_click_event (MetaUIFrame        *frame,
        * that cannot be resized (e. g. it is maximized and the theme
        * currently used has borders for maximized windows), see #751884 */
       return FALSE;
+    case META_FRAME_CONTROL_CLIENT_AREA:
+      /* This can happen with broken gtk themes that have a larger shadow size
+       * in the unfocused state than in the focused one. Then when clicking
+       * below the titlebar area in the unfocused state would still be
+       * considered a click on the titlebar due to it being shifted down because
+       * of the shadow. This then causes the window to be focused before this
+       * function is called, which removes the shadow such that the same
+       * position is now considered to be on the client area */
+      return FALSE;
     default:
       g_assert_not_reached ();
       return FALSE;
-- 
2.29.2

