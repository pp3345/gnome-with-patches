diff --git a/src/core/stack.c b/src/core/stack.c
index e1e73867daaf463b6efee84077da5c2bd716f556..8ceb72ef5531941b9ccf70b2c04f626fd0811fcf 100644
--- a/src/core/stack.c
+++ b/src/core/stack.c
@@ -35,6 +35,7 @@
 #include "core/main-private.h"
 #include "core/meta-workspace-manager-private.h"
 #include "core/window-private.h"
+#include "core/workspace-private.h"
 #include "meta/group.h"
 #include "meta/prefs.h"
 #include "meta/workspace.h"
@@ -1021,7 +1022,8 @@ window_contains_point (MetaWindow *window,
 }
 
 static gboolean
-window_can_get_default_focus (MetaWindow *window)
+window_can_get_default_focus (MetaWindow    *window,
+                              MetaWorkspace *workspace)
 {
   if (window->unmaps_pending > 0)
     return FALSE;
@@ -1032,7 +1034,10 @@ window_can_get_default_focus (MetaWindow *window)
   if (!meta_window_is_focusable (window))
     return FALSE;
 
-  if (!meta_window_should_be_showing (window))
+  if (!meta_window_showing_on_its_workspace (window))
+    return FALSE;
+
+  if (!meta_window_located_on_workspace (window, workspace))
     return FALSE;
 
   if (window->type == META_WINDOW_DOCK)
@@ -1068,7 +1073,7 @@ get_default_focus_window (MetaStack     *stack,
       if (window == not_this_one)
         continue;
 
-      if (!window_can_get_default_focus (window))
+      if (!window_can_get_default_focus (window, workspace))
         continue;
 
       if (must_be_at_point && !window_contains_point (window, root_x, root_y))
@@ -1139,7 +1144,7 @@ meta_stack_get_default_focus_candidates (MetaStack     *stack,
     {
       GList *next = l->next;
 
-      if (!window_can_get_default_focus (l->data))
+      if (!window_can_get_default_focus (l->data, workspace))
         windows = g_list_delete_link (windows, l);
 
       l = next;
diff --git a/src/core/window-private.h b/src/core/window-private.h
index d1730c98800baae9523b475a070b310d9c3ea89e..7e9274d6b8e81a1b42951f959ebb7fe1570b1196 100644
--- a/src/core/window-private.h
+++ b/src/core/window-private.h
@@ -717,6 +717,8 @@ void        meta_window_get_session_geometry (MetaWindow  *window,
 
 void        meta_window_update_unfocused_button_grabs (MetaWindow *window);
 
+void        meta_window_appears_focused_changed (MetaWindow *window);
+
 void     meta_window_set_focused_internal (MetaWindow *window,
                                            gboolean    focused);
 
diff --git a/src/core/window.c b/src/core/window.c
index d99db949f8f489853cdf2b0f3f138403b7da0d82..8f3ddcc81cbd7a261ad75576ef11e282428dbae9 100644
--- a/src/core/window.c
+++ b/src/core/window.c
@@ -251,6 +251,10 @@ prefs_changed_callback (MetaPreference pref,
       meta_window_recalc_features (window);
       meta_window_queue (window, META_QUEUE_MOVE_RESIZE);
     }
+  else if (pref == META_PREF_FOCUS_MODE)
+    {
+      meta_window_appears_focused_changed (window);
+    }
 }
 
 static void
@@ -4911,6 +4915,9 @@ set_workspace_state (MetaWindow    *window,
         }
     }
 
+  if (!window->constructing)
+    meta_window_appears_focused_changed (window);
+
   /* queue a move_resize since changing workspaces may change
    * the relevant struts
    */
@@ -5210,7 +5217,7 @@ meta_window_change_workspace_by_index (MetaWindow *window,
     meta_window_change_workspace (window, workspace);
 }
 
-static void
+void
 meta_window_appears_focused_changed (MetaWindow *window)
 {
   set_net_wm_state (window);
@@ -7312,7 +7319,16 @@ meta_window_get_frame (MetaWindow *window)
 gboolean
 meta_window_appears_focused (MetaWindow *window)
 {
-  return window->has_focus || (window->attached_focus_window != NULL);
+  MetaWorkspaceManager *workspace_manager;
+  MetaWorkspace *workspace;
+
+  workspace_manager = window->display->workspace_manager;
+  workspace = meta_window_get_workspace (window);
+
+  if (workspace && workspace != workspace_manager->active_workspace)
+    return window == meta_workspace_get_default_focus_window (workspace);
+  else
+    return window->has_focus || window->attached_focus_window;
 }
 
 gboolean
diff --git a/src/core/workspace-private.h b/src/core/workspace-private.h
index a58b2347d79cabd09df7f13af65e84ab657503e7..f0d896f6cd0badf3c56811f24c5632550e00cb5d 100644
--- a/src/core/workspace-private.h
+++ b/src/core/workspace-private.h
@@ -92,6 +92,7 @@ GList* meta_workspace_get_onscreen_region       (MetaWorkspace *workspace);
 GList * meta_workspace_get_onmonitor_region (MetaWorkspace      *workspace,
                                              MetaLogicalMonitor *logical_monitor);
 
+MetaWindow * meta_workspace_get_default_focus_window (MetaWorkspace *workspace);
 void meta_workspace_focus_default_window (MetaWorkspace *workspace,
                                           MetaWindow    *not_this_one,
                                           guint32        timestamp);
diff --git a/src/core/workspace.c b/src/core/workspace.c
index 32ee8da93abbedd5cc16130b1b0ced1415a3da01..347dc89903941dca064298895f834b08b8fa579a 100644
--- a/src/core/workspace.c
+++ b/src/core/workspace.c
@@ -365,15 +365,37 @@ meta_workspace_remove (MetaWorkspace *workspace)
    */
 }
 
+static void
+update_workspace_default_focus (MetaWorkspace *workspace,
+                                MetaWindow    *not_this_one)
+{
+  g_autoptr (GSList) windows = NULL;
+  GSList *l;
+
+  windows = meta_display_list_windows (workspace->display, META_LIST_DEFAULT);
+  for (l = windows; l; l = l->next)
+    {
+      MetaWindow *window = META_WINDOW (l->data);
+
+      if (meta_window_located_on_workspace (window, workspace) &&
+          window != not_this_one)
+        meta_window_appears_focused_changed (window);
+    }
+}
+
 void
 meta_workspace_add_window (MetaWorkspace *workspace,
                            MetaWindow    *window)
 {
+  MetaWorkspaceManager *workspace_manager;
+
   g_return_if_fail (g_list_find (workspace->mru_list, window) == NULL);
 
   COGL_TRACE_BEGIN_SCOPED (MetaWorkspaceAddWindow,
                            "Workspace (add window)");
 
+  workspace_manager = workspace->display->workspace_manager;
+
   workspace->mru_list = g_list_prepend (workspace->mru_list, window);
 
   workspace->windows = g_list_prepend (workspace->windows, window);
@@ -386,6 +408,9 @@ meta_workspace_add_window (MetaWorkspace *workspace,
       meta_workspace_invalidate_work_area (workspace);
     }
 
+  if (workspace != workspace_manager->active_workspace)
+    update_workspace_default_focus (workspace, window);
+
   g_signal_emit (workspace, signals[WINDOW_ADDED], 0, window);
   g_object_notify_by_pspec (G_OBJECT (workspace), obj_props[PROP_N_WINDOWS]);
 }
@@ -394,6 +419,8 @@ void
 meta_workspace_remove_window (MetaWorkspace *workspace,
                               MetaWindow    *window)
 {
+  MetaWorkspaceManager *workspace_manager = workspace->display->workspace_manager;
+
   COGL_TRACE_BEGIN_SCOPED (MetaWorkspaceRemoveWindow,
                            "Workspace (remove window)");
 
@@ -410,6 +437,9 @@ meta_workspace_remove_window (MetaWorkspace *workspace,
       meta_workspace_invalidate_work_area (workspace);
     }
 
+  if (workspace != workspace_manager->active_workspace)
+    update_workspace_default_focus (workspace, window);
+
   g_signal_emit (workspace, signals[WINDOW_REMOVED], 0, window);
   g_object_notify (G_OBJECT (workspace), "n-windows");
 }
@@ -658,6 +688,7 @@ meta_workspace_activate_with_focus (MetaWorkspace *workspace,
   if (focus_this)
     {
       meta_window_activate (focus_this, timestamp);
+      update_workspace_default_focus (workspace, focus_this);
     }
   else if (move_window)
     {
@@ -1282,6 +1313,20 @@ meta_workspace_get_name (MetaWorkspace *workspace)
   return meta_prefs_get_workspace_name (meta_workspace_index (workspace));
 }
 
+MetaWindow *
+meta_workspace_get_default_focus_window (MetaWorkspace *workspace)
+{
+  if (meta_prefs_get_focus_mode () == G_DESKTOP_FOCUS_MODE_CLICK)
+    {
+      return meta_stack_get_default_focus_window (workspace->display->stack,
+                                                  workspace, NULL);
+    }
+  else
+    {
+      return NULL;
+    }
+}
+
 void
 meta_workspace_focus_default_window (MetaWorkspace *workspace,
                                      MetaWindow    *not_this_one,
